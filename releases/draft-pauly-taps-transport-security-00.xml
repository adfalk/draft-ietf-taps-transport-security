<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.3 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-pauly-taps-transport-security-00" category="info">

  <front>
    <title abbrev="transport security survey">A Survey of Transport Security Protocols</title>

    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cawood@apple.com</email>
      </address>
    </author>

    <date year="2017" month="July" day="03"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document provides a survey of commonly used or notable network security protocols, with a focus on how they interact and integrate with applications and transport protocols. Its goal is to supplement efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer Security (DTLS), Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, and Internet Key Exchange with Encapsulating Security Protocol (IKEv2 + ESP). This survey is not limited to protocols developed within the scope or context of the IETF.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document provides a survey of commonly used or notable network security protocols, with a focus on how they interact and integrate with applications and transport protocols.  Its goal is to supplement efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer Security (DTLS), Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, and Internet Key Exchange with Encapsulating Security Protocol (IKEv2 + ESP). This survey is not limited to protocols developed within the scope or context of the IETF.</t>

<t>For each protocol, this document provides a brief description, the security features it provides, and the dependencies it has on the underlying transport. This is followed by defining the set of transport security features shared by these protocols. Finally, we distill the application and transport interfaces provided by the transport security protocols.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The following terms are used throughout this document to describe the roles and interactions of transport security protocols:</t>

<t><list style="symbols">
  <t>Transport Feature: a specific end-to-end feature that the transport layer provides to an application.  Examples include confidentiality, reliable delivery, ordered delivery, message-versus-stream orientation, etc.</t>
  <t>Transport Service: a set of Transport Features, without an association to any given framing protocol, which provides a functionality to an application.</t>
  <t>Transport Protocol: an implementation that provides one or more different transport services using a specific framing and header format on the wire. A Transport Protocol services an application.</t>
  <t>Application: an entity that uses a transport protocol for end-to-end delivery of data across the network (this may also be an upper layer protocol or tunnel encapsulation).</t>
  <t>Security Feature: a specific feature that a network security layer provides to applications. Examples include authentication, encryption, key generation, session resumption, and privacy. A feature may be considered to be Mandatory or Optional to an application’s implementation.</t>
  <t>Security Protocol: a defined network protocol that implements one or more security features. Security protocols may be used alongside transport protocols, and in combination with one another when appropriate.</t>
  <t>Handshake Protocol: a security protocol that performs a handshake to validate peers and establish a shared cryptographic key.</t>
  <t>Record Protocol: a security protocol that allows data to be encrypted in records or datagrams based on a shared cryptographic key.</t>
  <t>Session: an ephemeral security association between applications.</t>
  <t>Connection: the shared state of two or more endpoints that persists across messages that are transmitted between these endpoints. A connection is a transient participant of a session, and a session generally lasts between connection instances.</t>
  <t>Connection Mobility: a property of a connection that allows it to be multihomed or resilient across network interface or address changes.</t>
  <t>Peer: an endpoint application party to a session.</t>
  <t>Client: the peer responsible for initiating a session.</t>
  <t>Server: the peer responsible for responding to a session initiation.</t>
</list></t>

</section>
<section anchor="transport-security-protocol-descriptions" title="Transport Security Protocol Descriptions">

<t>This section contains descriptions of security protocols that currently used to protect data being sent over a network.</t>

<t>For each protocol, we describe the features it provides and its dependencies on other protocols.</t>

<section anchor="tls" title="TLS">

<t>TLS (Transport Layer Security) <xref target="RFC5246"/> is a common protocol used to establish a secure session between two endpoints. Communication
over this session “prevents eavesdropping, tampering, and message forgery.” TLS consists
of a tightly coupled handshake and record protocol. The handshake protocol is used to authenticate peers,
negotiate protocol options, such as cryptographic algorithms, and derive session-specific
keying material. The record protocol is used to marshal (possibly encrypted) data from one
peer to the other. This data may contain handshake messages or raw application data.</t>

<section anchor="protocol-description" title="Protocol Description">

<t>TLS is the composition of a handshake and record protocol <xref target="I-D.ietf-tls-tls13"/>.
The record protocol is designed to marshal an arbitrary, in-order stream of bytes from one endpoint to the other.
It handles segmenting, compressing (when enabled), and encrypting data into discrete records. When configured
to use an AEAD algorithm, it also handles nonce generation and encoding for each record. The record protocol is
hidden from the client behind a byte stream-oriented API.</t>

<t>The handshake protocol serves several purposes, including: peer authentication, protocol option (key exchange
algorithm and ciphersuite) negotiation, and key derivation. Peer authentication may be mutual. However, commonly,
only the server is authenticated. X.509 certificates are commonly used in this authentication step, though
other mechanisms, such as raw public keys <xref target="RFC7250"/>, exist. The client is not authenticated unless explicitly
requested by the server with a CertificateRequest handshake message.</t>

<t>The handshake protocol is also extensible. It allows for a variety of extensions to be included by either the client
or server. These extensions are used to specify client preferences, e.g., the application-layer protocol to be driven
with the TLS connection <xref target="RFC7301"/>, or signals to the server to aid operation, e.g., the server name <xref target="RFC6066"/>. Various extensions also exist
to tune the parameters of the record protocol, e.g., the maximum fragment length <xref target="RFC6066"/>.</t>

<t>Alerts are used to convey errors and other atypical events to the endpoints. There are two classes of alerts: closure
and error alerts. A closure alert is used to signal to the other peer that the sender wishes to terminate the connection.
The sender typically follows a close alert with a TCP FIN segment to close the connection. Error alerts are used to
indicate problems with the handshake or individual records. Most errors are fatal and are followed by connection
termination. However, warning alerts may be handled at the discretion of each respective implementation.</t>

<t>Once a session is disconnected all session keying material must be torn down, unless resumption information was previously
negotiated. TLS supports stateful and stateless resumption. (Here, the state refers to the information requirements
for the server. It is assumed that the client must always store some state information in order to resume a session.)</t>

</section>
<section anchor="protocol-features" title="Protocol Features">

<t><list style="symbols">
  <t>Key exchange and ciphersuite algorithm negotiation.</t>
  <t>Stateful and stateless session resumption.</t>
  <t>Certificate- and raw public-key-based authentication.</t>
  <t>Mutual client and server authentication.</t>
  <t>Byte stream confidentiality and integrity.</t>
  <t>Extensibility via well-defined extensions.</t>
  <t>0-RTT data support (in TLS 1.3 only).</t>
  <t>Application-layer protocol negotiation.</t>
  <t>Transparent data segmentation.</t>
</list></t>

</section>
<section anchor="protocol-dependencies" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP for in-order, reliable transport.</t>
  <t>(Optionally) A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="dtls" title="DTLS">

<t>DTLS (Datagram Transport Layer Security) <xref target="RFC6347"/> is based on TLS, but differs in that
it is designed to run over UDP instead of TCP. Since UDP does not guarantee datagram
ordering or reliability, DTLS modifies the protocol to make sure it can still provide
the same security guarantees as TLS. DTLS was designed to be as close to TLS as possible,
so this document will assume that all properties from TLS are carried over except where specified.</t>

<section anchor="protocol-description-1" title="Protocol Description">

<t>DTLS is modified from TLS to account for packet loss and reordering that occur when operating over a datagram-based transport, i.e., UDP. Each message is assigned an explicit sequence number to be used to reorder on the receiving end. This removes the inter-record dependency and allows each record to be decrypt in isolation of the rest. However, DTLS does not deviate from TLS in that in still provides in-order delivery of data to the application.</t>

<t>With respect to packet loss, if one peer has sent a handshake message and has not yet received its expected response, it will retransmit the handshake message after a configurable timeout.</t>

<t>To account for long records that cannot fit within a single UDP datagram, DTLS supports fragmentation of records across datagrams, keeping track of fragment offsets and lengths in each datagram. The receiving peer must re-assemble records before decrypting.</t>

<t>DTLS relies on UDP’s port numbers to allow peers with multiple DTLS sessions between them to demultiplex ‘streams’ of encrypted packets that share a single TLS session.</t>

<t>Since datagrams may be replayed, DTLS provides anti-replay detection based on a window of acceptable sequence numbers <xref target="RFC4303"/>.</t>

</section>
<section anchor="protocol-features-1" title="Protocol Features">

<t><list style="symbols">
  <t>Anti-replay protection between datagrams.</t>
  <t>Basic reliability for handshake messages.</t>
  <t>See also the features from TLS.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-1" title="Protocol Dependencies">

<t><list style="symbols">
  <t>Since DTLS runs over an unreliable, unordered datagram transport, it does not require any reliability features.</t>
  <t>DTLS contains its own length, so although it runs over a datagram transport, it does not rely on the transport protocol supporting framing.</t>
  <t>UDP for port numbers used for demultiplexing.</t>
  <t>Path MTU discovery.</t>
</list></t>

</section>
</section>
<section anchor="quic-with-tls" title="QUIC with TLS">

<t>QUIC (Quick UDP Internet Connections) is a new transport protocol that runs over UDP, and was
originally designed with a tight integration with its security protocol and application protocol
mappings. The QUIC transport layer itself provides support for data confidentiality and integrity.
This requires keys to be derived with a separate handshake protocol. A mapping for QUIC over
TLS 1.3 <xref target="I-D.ietf-quic-tls"/> has been specified to provide this handshake.</t>

<section anchor="protocol-description-2" title="Protocol Description">

<t>Since QUIC integrates TLS with its transport, it relies on specific integration points
between its security and transport sides. Specifically, these points are:</t>

<t><list style="symbols">
  <t>Starting the handshake to generate keys and provide authentication (and providing the transport for the handshake).</t>
  <t>Client address validation.</t>
  <t>Key ready events from TLS to notify the QUIC transport.</t>
  <t>Exporting secrets from TLS to the QUIC transport.</t>
</list></t>

<t>The QUIC transport layer support multiple streams over a single connection. The first
stream is reserved specifically for a TLS connection. The TLS handshake, along with
further records, are sent over this stream. This TLS connection follows the TLS standards
and inherits the security properties of TLS. The handshake generates keys, which are
then exported to the rest of the QUIC connection, and are used to protect the rest of the streams.</t>

<t>The initial QUIC messages are sent without encryption in order to start the TLS handshake.
Once the handshake has generated keys, the subsequent messages are encrypted. The TLS 1.3
handshake for QUIC is used in either a single-RTT mode or a fast-open zero-RTT mode. When
zero-RTT handshakes are possible, the encryption first transitions to use the zero-RTT keys
before using single-RTT handshake keys after the next TLS flight.</t>

</section>
<section anchor="protocol-features-2" title="Protocol Features">

<t><list style="symbols">
  <t>Handshake properties of TLS.</t>
  <t>Multiple encrypted streams over a single connection without head-of-line blocking.</t>
  <t>Packet payload encryption and complete packet authentication (with the exception of the Public Reset packet, which is not authenticated).</t>
</list></t>

</section>
<section anchor="protocol-dependencies-2" title="Protocol Dependencies">

<t><list style="symbols">
  <t>QUIC transport relies on UDP.</t>
  <t>QUIC transport relies on TLS 1.3 for authentication and initial key derivation.</t>
  <t>TLS within QUIC relies on a reliable stream abstraction for its handshake.</t>
</list></t>

</section>
</section>
<section anchor="minimalt" title="MinimalT">

<t>MinimalT is a UDP-based transport security protocol designed to offer confidentiality, mutual authentication, DoS prevention, and connection
mobility <xref target="MinimalT"/>. One major goal of the protocol is to leverage existing protocols to obtain server-side configuration information used to
more quickly bootstrap a connection. MinimalT uses a variant of TCP’s congestion control algorithm.</t>

<section anchor="protocol-description-3" title="Protocol Description">

<t>MinimalT is a secure transport protocol built on top of a widespread directory service. Clients and servers interact with local directory
services to (a) resolve server information and (b) public ephemeral state information, respectively. Clients connect to a local
resolver once at boot time. Through this resolver they recover the IP address(es) and public key(s) of each server to which
they want to connect.</t>

<t>Connections are instances of user-authenticated, mobile sessions between two endpoints. Connections run within tunnels between hosts. A tunnel
is a server-authenticated container that multiplexes multiple connections between the same hosts. All connections in a tunnel share the
same transport state machine and encryption. Each tunnel has a dedicated control connection used to configure and manage the tunnel over time.
Moreover, since tunnels are independent of the network address information, they may be reused as both ends of the tunnel move about the network.
This does however imply that the connection establishment and packet encryption mechanisms are coupled.</t>

<t>Before a client connects to a remote service, it must first establish a tunnel to the host providing or offering the service. Tunnels are established
in 1-RTT using an ephemeral key obtained from the directory service. Tunnel initiators provide their own ephemeral key and, optionally, a
DoS puzzle solution such that the recipient (server) can verify the authenticity of the request and derive a shared secret. Within a tunnel,
new connections to services may be established.</t>

</section>
<section anchor="protocol-features-3" title="Protocol Features">

<t><list style="symbols">
  <t>0-RTT forward secrecy for new connections.</t>
  <t>DoS prevention by client-side puzzles.</t>
  <t>Tunnel-based mobility.</t>
  <t>(Transport Feature) Connection multiplexing between hosts across shared tunnels.</t>
  <t>(Transport Feature) Congestion control state is shared across connections between the same host pairs.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-3" title="Protocol Dependencies">

<t><list style="symbols">
  <t>A DNS-like resolution service to obtain location information (an IP address) and ephemeral keys.</t>
  <t>A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="curvecp" title="CurveCP">

<t>CurveCP <xref target="CurveCP"/> is a UDP-based transport security protocol from Daniel J. Bernstein.
Unlike other transport security protocols, it is based entirely upon highly efficient public
key algorithms. This removes many pitfalls associated with nonce reuse and key synchronization.</t>

<section anchor="protocol-description-4" title="Protocol Description">

<t>CurveCP is a UDP-based transport security protocol. It is built on three principal features: exclusive use of public key authenticated
encryption of packets, server-chosen cookies to prohibit memory and computation DoS at the server, and connection mobility with a
client-chosen ephemeral identifier.</t>

<t>There are two rounds in CurveCP. In the first round, the client sends its first initialization packet to the server, carrying its (possibly fresh)
ephemeral public key C’, with zero-padding encrypted under the server’s long-term public key. The server replies with a cookie and its own ephemeral
key S’ and a cookie that is to be used by the client. Upon receipt, the client then generates its second initialization packet carrying: the
ephemeral key C’, cookie, and an encryption of C’, the server’s domain name, and, optionally, some message data. The server verifies the cookie
and the encrypted payload and, if valid, proceeds to send data in return. At this point, the connection is established and the two
parties can communicate.</t>

<t>The use of only public-key encryption and authentication, or “boxing”, is done to simplify problems that come with symmetric key management
and synchronization. For example, it allows the sender of a message to be in complete control of each message’s nonce. It does not require
either end to share secret keying material. And it allows ephemeral public keys to be associated with connections (or sessions).</t>

<t>The client and server do not perform a standard key exchange. Instead, in the initial exchange of packets, the each party provides its
own ephemeral key to the other end. The client can choose a new ephemeral key for every new connection. However, the server must rotate
these keys on a slower basis. Otherwise, it would be trivial for an attacker to force the server to create and store ephemeral keys
with a fake client initialization packet.</t>

<t>Unlike TCP, the server employs cookies to enable source validation. After receiving the client’s initial packet, encrypted under the server’s
long-term public key, the server generates and returns a stateless cookie that must be echoed back in the client’s following message.
This cookie is encrypted under the client’s ephemeral public key.
This stateless technique prevents attackers from hijacking client initialization packets to obtain cookie values to flood clients. (A client
would detect the duplicate cookies and reject the flooded packets.) Similarly, replaying the client’s second packet, carrying the cookie,
will be detected by the server.</t>

<t>CurveCP supports a weak form of client authentication. Clients are permitted to send their long-term public keys in the second initialization
packet. A server can verify this public key and, if untrusted, drop the connection and subsequent data.</t>

<t>Unlike some other protocols, CurveCP data packets only leave the ephemeral public key, i.e., the connection ID, and the per-message nonce
in the clear. Everything else is encrypted.</t>

</section>
<section anchor="protocol-features-4" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure data encryption and authentication.</t>
  <t>Per-packet public-key encryption.</t>
  <t>1-RTT session bootstrapping.</t>
  <t>Connection mobility based on a client-chosen ephemeral identifier.</t>
  <t>Connection establishment message padding to prevent traffic amplification.</t>
  <t>Sender-chosen explicit nonces, e.g., based on a sequence number.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-4" title="Protocol Dependencies">

<t><list style="symbols">
  <t>An unreliable transport protocol such as UDP.</t>
</list></t>

</section>
</section>
<section anchor="tcpcrypt" title="tcpcrypt">

<t>tcpcrypt is a lightweight extension to the TCP protocol to enable opportunistic encryption.</t>

<section anchor="protocol-description-5" title="Protocol Description">

<t>tcpcrypt extends TCP to enable opportunistic encryption between the two ends of a TCP connection <xref target="I-D.ietf-tcpinc-tcpcrypt"/>.
It is a type of TCP Encryption Protocol (TEP). The use of a TEP is negotiated using TCP headers
during the initial TCP handshake. Negotiating a TEP also involves agreeing upon a key exchange algorithm.
If and when a TEP is negotiated, the tcpcrypt key exchange occurs within the data segments of
the first packets exchanged after the handshake completes. The initiator of a connection
sends a list of support AEAD algorithms, a random nonce, and an ephemeral public key share. The
responder chooses an AEAD algorithm and replies with its own nonce and ephemeral key share.
The traffic encryption keys are derived from the key exchange.</t>

<t>Each tcpcrypt session is associated with a unique session ID; the value of which is derived from the current
shared secret used for the session. This can be cached and used to later resume a session.
Willingness to resume a session is signaled within the TCP-ENO negotiation option
during the TCP handshake <xref target="I-D.ietf-tcpinc-tcpeno"/>. Session identifiers are rotated each time they are resumed. Sessions may
also be re-keyed if the natural AEAD limit is reached.</t>

<t>tcpcrypt only encrypts the data portion of a TCP packet. It does not encrypt any header information,
such as the TCP sequence number.</t>

</section>
<section anchor="protocol-features-5" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure TCP packet encryption.</t>
  <t>Session caching and address-agnostic resumption.</t>
  <t>Session re-keying.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-5" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP (with option support).</t>
</list></t>

</section>
</section>
<section anchor="ikev2-with-esp" title="IKEv2 with ESP">

<t>IKEv2 <xref target="RFC7296"/> and ESP <xref target="RFC4303"/> together form the modern IPsec protocol suite that encrypts and authenticates IP packets, either as for creating tunnels (tunnel-mode) or for direct transport connections (transport-mode). This suite of protocols separates out the key generation protocol (IKEv2) from the transport encryption protocol (ESP). Each protocol can be used independently, but this document considers them together, since that is the most common pattern.</t>

<section anchor="protocol-descriptions" title="Protocol descriptions">

<section anchor="ikev2" title="IKEv2">

<t>IKEv2 is a control protocol that runs on UDP port 500. Its primary goal is to generate keys for Security Associations (SAs). It first uses a Diffie-Hellman key exchange to generate keys for the “IKE SA”, which is a set of keys used to encrypt further IKEv2 messages. It then goes through a phase of authentication in which both peers present blobs signed by a shared secret or private key, after which another set of keys is derived, referred to as the “Child SA”. These Child SA keys are used by ESP.</t>

<t>IKEv2 negotiates which protocols are acceptable to each peer for both the IKE and Child SAs using “Proposals”. Each proposal may contain an encryption algorithm, an authentication algorithm, a Diffie-Hellman group, and (for IKE SAs only) a pseudorandom function algorithm. Each peer may support multiple proposals, and the most preferred mutually supported proposal is chosen during the handshake.</t>

<t>The authentication phase of IKEv2 may use Shared Secrets, Certificates, Digital Signatures, or an EAP (Extensible Authentication Protocol) method. At a minimum, IKEv2 takes two round trips to set up both an IKE SA and a Child SA. If EAP is used, this exchange may be expanded.</t>

<t>Any SA used by IKEv2 can be rekeyed upon expiration, which is usually based either on time or number of bytes encrypted.</t>

<t>There is an extension to IKEv2 that allows session resumption <xref target="RFC5723"/>.</t>

<t>MOBIKE is a Mobility and Multihoming extension to IKEv2 that allows a set of Security Associations to migrate over different addresses and interfaces <xref target="RFC4555"/>.</t>

<t>When UDP is not available or well-supported on a network, IKEv2 may be encapsulated in TCP <xref target="I-D.ietf-ipsecme-tcp-encaps"/>.</t>

</section>
<section anchor="esp" title="ESP">

<t>ESP is a protocol that encrypts and authenticates IP and IPv6 packets. The keys used for both encryption and authentication can be derived from an IKEv2 exchange. ESP Security Associations come as pairs, one for each direction between two peers. Each SA is identified by a Security Parameter Index (SPI), which is marked on each encrypted ESP packet.</t>

<t>ESP packets include the SPI, a sequence number, an optional Initialization Vector (IV), payload data, padding, a length and next header field, and an Integrity Check Value.</t>

<t>From <xref target="RFC4303"/>, “ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.”</t>

<t>Since ESP operates on IP packets, it is not directly tied to the transport protocols it encrypts. This means it requires little or no change from transports in order to provide security.</t>

<t>ESP packets are sent directly over IP, except when a NAT is present, in which case they are sent on UDP port 4500, or via TCP encapsulation <xref target="I-D.ietf-ipsecme-tcp-encaps"/>.</t>

</section>
</section>
<section anchor="protocol-features-6" title="Protocol features">

<section anchor="ikev2-1" title="IKEv2">

<t><list style="symbols">
  <t>Encryption and authentication of handshake packets.</t>
  <t>Cryptographic algorithm negotiation.</t>
  <t>Session resumption.</t>
  <t>Mobility across addresses and interfaces.</t>
  <t>Peer authentication extensibility based on Shared Secret, Certificates, Digital Signatures, or EAP methods.</t>
</list></t>

</section>
<section anchor="esp-1" title="ESP">

<t><list style="symbols">
  <t>Data confidentiality and authentication.</t>
  <t>Connectionless integrity.</t>
  <t>Anti-replay protection.</t>
  <t>Limited flow confidentiality.</t>
</list></t>

</section>
</section>
<section anchor="protocol-dependencies-6" title="Protocol dependencies">

<section anchor="ikev2-2" title="IKEv2">

<t><list style="symbols">
  <t>Availability of UDP to negotiate, or implementation support for TCP-encapsulation.</t>
  <t>Some EAP authentication types require accessing a hardware device, such as a SIM card; or interacting with a user, such as password prompting.</t>
</list></t>

</section>
<section anchor="esp-2" title="ESP">

<t><list style="symbols">
  <t>Since ESP is below transport protocols, it does not have any dependencies on the transports themselves, other than on UDP or TCP for NAT traversal.</t>
</list></t>

</section>
</section>
</section>
</section>
<section anchor="common-transport-security-features" title="Common Transport Security Features">

<t>There exists a common set of features shared across the transport protocols surveyed in this document.
The mandatory features should be provided by any transport security protocol, while the optional features
are extensions that a subset of the protocols provide. For clarity, we also distinguish between handshake
and record features.</t>

<section anchor="mandatory-features" title="Mandatory Features">

<section anchor="handshake" title="Handshake">

<t><list style="symbols">
  <t>Forward-secure segment encryption and authentication: Transit data must be protected with an
authenticated encryption algorithm.</t>
  <t>Private key interface or injection: Authentication based on public key signatures is commonplace for
many transport security protocols.</t>
  <t>Endpoint authentication: The endpoint (receiver) of a new connection must be authenticated before any
data is sent to said party.</t>
  <t>Source validation: Source validation must be provided to mitigate server-targeted DoS attacks. This can
be done with puzzles or cookies.</t>
</list></t>

</section>
<section anchor="record" title="Record">

<t><list style="symbols">
  <t>Pre-shared key support: A record protocol must be able to use a pre-shared key established
out-of-band to encrypt individual messages, packets, or datagrams.</t>
</list></t>

</section>
</section>
<section anchor="optional-features" title="Optional Features">

<section anchor="handshake-1" title="Handshake">

<t><list style="symbols">
  <t>Mutual authentication: Transport security protocols should allow both endpoints to authenticate one another if needed.</t>
  <t>Application-layer feature negotiation: The type of application using a transport security protocol often requires
features configured at the connection establishment layer, e.g., ALPN <xref target="RFC7301"/>. Moreover, application-layer features may often be used to
offload the session to another server which can better handle the request. (The TLS SNI is one example of such a feature.)
As such, transport security protocols should provide a generic mechanism to allow for such application-specific features
and options to be configured or otherwise negotiated.</t>
  <t>Configuration extensions: The protocol negotiation should be extensible with addition of new configuration options.</t>
  <t>Session caching and management: Sessions should be cacheable to enable reuse and amortize the cost of performing
session establishment handshakes.</t>
</list></t>

</section>
<section anchor="record-1" title="Record">

<t><list style="symbols">
  <t>Connection mobility: Sessions should not be bound to a network connection (or 5 tuple). This allows cryptographic
key material and other state information to be reused in the event of a connection change. Examples of this include
a NAT rebinding that occurs without a client’s knowledge.</t>
</list></t>

</section>
</section>
</section>
<section anchor="transport-security-protocol-interfaces" title="Transport Security Protocol Interfaces">

<t>This section describes the interface surface exposed by the security protocols described
above, with each interface. Note that not all protocols support each interface.</t>

<section anchor="configuration-interfaces" title="Configuration Interfaces">

<t>Configuration interfaces are used to configure the security protocols before a
handshake begins or the keys are negotiated.</t>

<t><list style="symbols">
  <t>Identity and Private Keys<vspace />
The application can provide its identities (certificates) and private keys, or
mechanisms to access these, to the security protocol to use during handshakes.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2</t>
  <t>Supported Algorithms (Key Exchange, Signatures and Ciphersuites)<vspace />
The application can choose the algorithms that are supported for key exchange,
signatures, and ciphersuites.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2</t>
  <t>Session Cache<vspace />
The application provides the ability to save and retrieve session state (tickets,
keying material, server parameters) that may be used to resume the security session.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT</t>
  <t>Authentication Delegate<vspace />
The application provides access to a separate module that will provide authentication,
using EAP for example.<vspace />
Protocols: IKEv2</t>
</list></t>

</section>
<section anchor="handshake-interfaces" title="Handshake Interfaces">

<t>Handshake interfaces are the points of interaction between a handshake protocol and
the application, record protocol, and transport once the handshake is active.</t>

<t><list style="symbols">
  <t>Send Handshake Messages<vspace />
The handshake protocol needs to be able to send messages over a transport to the remote peer to establish trust and negotiate keys.<vspace />
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2)</t>
  <t>Receive Handshake Messages<vspace />
The handshake protocol needs to be able to receive messages from the remote peer
over a transport to establish trust and negotiate keys.<vspace />
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2)</t>
  <t>Identity Validation<vspace />
During a handshake, the security protocol will conduct identity validation of the peer. 
This can call into the application to offload validation.<vspace />
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2)</t>
  <t>Source Address Validation<vspace />
The handshake protocol may delegate validation of the remote peer that has sent
data to the transport protocol or application. This involves sending a cookie
exchange to avoid DoS attacks.<vspace />
Protocols: QUIC + TLS</t>
  <t>Key Update<vspace />
The handshake protocol may be instructed to update its keying material, either
by the application directly or by the record protocol sending a key expiration event.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2</t>
  <t>Pre-Shared Key Export<vspace />
The handshake protocol will generate one or more keys to be used for record encryption/decryption and authentication. These may be explicitly exportable to the application, traditionally limited to direct  export to the record protocol, or inherently non-exportable because the keys must be used directly in conjunction with the record protocol.  <list style="symbols">
      <t>Explict export: TLS (for QUIC), tcpcrypt, IKEv2</t>
      <t>Direct export: TLS, DTLS, MinimalT</t>
      <t>Non-exportable: CurveCP</t>
    </list></t>
</list></t>

</section>
<section anchor="record-interfaces" title="Record Interfaces">

<t>Record interfaces are the points of interaction between a record protocol and the application, handshake protocol, and transport once in use.</t>

<t><list style="symbols">
  <t>Pre-Shared Key Import<vspace />
Either the handshake protocol or the application directly can supply pre-shared keys for the record protocol use for encryption/decryption and authentication. If the application can supply keys directly, this is considered explicit import; if the handshake protocol traditionally provides the keys directly, it is considered direct import; if the keys can only be shared by the handshake, they are considered non-importable.
  <list style="symbols">
      <t>Explict import: QUIC, ESP</t>
      <t>Direct import: TLS, DTLS, MinimalT, tcpcrypt</t>
      <t>Non-importable: CurveCP</t>
    </list></t>
  <t>Encrypt application data<vspace />
The application can send data to the record protocol to encrypt it into a format that can be sent on the underlying transport. The encryption step may require that the application data is treated as a stream or as datagrams, and that the transport to send the encrypted records present a stream or datagram interface.
  <list style="symbols">
      <t>Stream-to-Stream Protocols: TLS, tcpcrypt</t>
      <t>Datagram-to-Datagram Protocols: DTLS, ESP</t>
      <t>Stream-to-Datagram Protocols: QUIC ((Editor’s Note: This depends on the interface QUIC exposes to applications.))</t>
    </list></t>
  <t>Decrypt application data<vspace />
The application can receive data from its transport to be decrypted using record protocol. The decryption step may require that the incoming transport data is presented as a stream or as datagrams, and that the resulting application data is a stream or datagrams.
  <list style="symbols">
      <t>Stream-to-Stream Protocols: TLS, tcpcrypt</t>
      <t>Datagram-to-Datagram Protocols: DTLS, ESP</t>
      <t>Datagram-to-Stream Protocols: QUIC ((Editor’s Note: This depends on the interface QUIC exposes to applications.))</t>
    </list></t>
  <t>Key Expiration<vspace />
The record protocol can signal that its keys are expiring due to reaching a time-based deadline, or a use-based deadline (number of bytes that have been encrypted with the key). This interaction is often limited to signaling between the record layer and the handshake layer.<vspace />
Protocols: ESP ((Editor’s note: One may consider TLS/DTLS to also have this interface))</t>
  <t>Transport mobility<vspace />
The record protocol can be signaled that it is being migrated to another transport or interface due to connection mobility, which may reset address and state validation.<vspace />
Protocols: QUIC, MinimalT, CurveCP, ESP</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has on request to IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>N/A</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>The authors would like to thank Mirja Kühlewind, Brian Trammell, Yannick Sierra,
Frederic Jacobs, and Bob Bradley for their input and feedback on earlier versions
of this draft.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC4303" target='http://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>



<reference  anchor="RFC4555" target='http://www.rfc-editor.org/info/rfc4555'>
<front>
<title>IKEv2 Mobility and Multihoming Protocol (MOBIKE)</title>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2006' month='June' />
<abstract><t>This document describes the MOBIKE protocol, a mobility and multihoming extension to Internet Key Exchange (IKEv2).  MOBIKE allows the IP addresses associated with IKEv2 and tunnel mode IPsec Security Associations to change.  A mobile Virtual Private Network (VPN) client could use MOBIKE to keep the connection with the VPN gateway active while moving from one address to another.  Similarly, a multihomed host could use MOBIKE to move the traffic to a different interface if, for instance, the one currently being used stops working.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4555'/>
<seriesInfo name='DOI' value='10.17487/RFC4555'/>
</reference>



<reference  anchor="RFC5246" target='http://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC5723" target='http://www.rfc-editor.org/info/rfc5723'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2) Session Resumption</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2010' month='January' />
<abstract><t>The Internet Key Exchange version 2 (IKEv2) protocol has a certain computational and communication overhead with respect to the number of round trips required and the cryptographic operations involved. In remote access situations, the Extensible Authentication Protocol (EAP) is used for authentication, which adds several more round trips and consequently latency.</t><t>To re-establish security associations (SAs) upon a failure recovery condition is time consuming especially when an IPsec peer (such as a VPN gateway) needs to re-establish a large number of SAs with various endpoints.  A high number of concurrent sessions might cause additional problems for an IPsec peer during SA re-establishment.</t><t>In order to avoid the need to re-run the key exchange protocol from scratch, it would be useful to provide an efficient way to resume an IKE/IPsec session.  This document proposes an extension to IKEv2 that allows a client to re-establish an IKE SA with a gateway in a highly efficient manner, utilizing a previously established IKE SA.</t><t>A client can reconnect to a gateway from which it was disconnected. The proposed approach encodes partial IKE state into an opaque ticket, which can be stored on the client or in a centralized store, and is later made available to the IKEv2 responder for re-authentication.  We use the term ticket to refer to the opaque data that is created by the IKEv2 responder.  This document does not specify the format of the ticket but examples are provided.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5723'/>
<seriesInfo name='DOI' value='10.17487/RFC5723'/>
</reference>



<reference  anchor="RFC6066" target='http://www.rfc-editor.org/info/rfc6066'>
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<date year='2011' month='January' />
<abstract><t>This document provides specifications for existing TLS extensions.  It is a companion document for RFC 5246, &quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;.  The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6066'/>
<seriesInfo name='DOI' value='10.17487/RFC6066'/>
</reference>



<reference  anchor="RFC6347" target='http://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>



<reference  anchor="RFC7250" target='http://www.rfc-editor.org/info/rfc7250'>
<front>
<title>Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='P.' surname='Wouters' fullname='P. Wouters' role='editor'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='J.' surname='Gilmore' fullname='J. Gilmore'><organization /></author>
<author initials='S.' surname='Weiler' fullname='S. Weiler'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='June' />
<abstract><t>This document specifies a new certificate type and two TLS extensions for exchanging raw public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS).  The new certificate type allows raw public keys to be used for authentication.</t></abstract>
</front>
<seriesInfo name='RFC' value='7250'/>
<seriesInfo name='DOI' value='10.17487/RFC7250'/>
</reference>



<reference  anchor="RFC7296" target='http://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>



<reference  anchor="RFC7301" target='http://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC8095" target='http://www.rfc-editor.org/info/rfc8095'>
<front>
<title>Services Provided by IETF Transport Protocols and Congestion Control Mechanisms</title>
<author initials='G.' surname='Fairhurst' fullname='G. Fairhurst' role='editor'><organization /></author>
<author initials='B.' surname='Trammell' fullname='B. Trammell' role='editor'><organization /></author>
<author initials='M.' surname='Kuehlewind' fullname='M. Kuehlewind' role='editor'><organization /></author>
<date year='2017' month='March' />
<abstract><t>This document describes, surveys, and classifies the protocol mechanisms provided by existing IETF protocols, as background for determining a common set of transport services.  It examines the Transmission Control Protocol (TCP), Multipath TCP, the Stream Control Transmission Protocol (SCTP), the User Datagram Protocol (UDP), UDP-Lite, the Datagram Congestion Control Protocol (DCCP), the Internet Control Message Protocol (ICMP), the Real-Time Transport Protocol (RTP), File Delivery over Unidirectional Transport / Asynchronous Layered Coding (FLUTE/ALC) for Reliable Multicast, NACK- Oriented Reliable Multicast (NORM), Transport Layer Security (TLS), Datagram TLS (DTLS), and the Hypertext Transport Protocol (HTTP), when HTTP is used as a pseudotransport.  This survey provides background for the definition of transport services within the TAPS working group.</t></abstract>
</front>
<seriesInfo name='RFC' value='8095'/>
<seriesInfo name='DOI' value='10.17487/RFC8095'/>
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpcrypt">
<front>
<title>Cryptographic protection of TCP Streams (tcpcrypt)</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='Q' surname='Slack' fullname='Quinn Slack'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='March' day='13' year='2017' />

<abstract><t>This document specifies tcpcrypt, a TCP encryption protocol designed for use in conjunction with the TCP Encryption Negotiation Option (TCP-ENO) [I-D.ietf-tcpinc-tcpeno].  Tcpcrypt coexists with middleboxes by tolerating resegmentation, NATs, and other manipulations of the TCP header.  The protocol is self-contained and specifically tailored to TCP implementations, which often reside in kernels or other environments in which large external software dependencies can be undesirable.  Because the size of TCP options is limited, the protocol requires one additional one-way message latency to perform key exchange before application data may be transmitted. However, this cost can be avoided between two hosts that have recently established a previous tcpcrypt connection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpcrypt-06' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpcrypt-06.txt' />
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpeno">
<front>
<title>TCP-ENO: Encryption Negotiation Option</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='March' day='8' year='2017' />

<abstract><t>Despite growing adoption of TLS [RFC5246], a significant fraction of TCP traffic on the Internet remains unencrypted.  The persistence of unencrypted traffic can be attributed to at least two factors. First, some legacy protocols lack a signaling mechanism (such as a "STARTTLS" command) by which to convey support for encryption, making incremental deployment impossible.  Second, legacy applications themselves cannot always be upgraded, requiring a way to implement encryption transparently entirely within the transport layer.  The TCP Encryption Negotiation Option (TCP-ENO) addresses both of these problems through a new TCP option kind providing out-of-band, fully backward-compatible negotiation of encryption.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpeno-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpeno-08.txt' />
</reference>



<reference anchor="I-D.ietf-quic-transport">
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

<author initials='J' surname='Iyengar' fullname='Janardhan Iyengar'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='June' day='13' year='2017' />

<abstract><t>This document defines the core of the QUIC transport protocol.  This document describes connection establishment, packet format, multiplexing and reliability.  Accompanying documents describe the cryptographic handshake and loss detection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-04.txt' />
</reference>



<reference anchor="I-D.ietf-quic-tls">
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='June' day='13' year='2017' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic.  Working Group information can be found at https://github.com/quicwg; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/tls.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-04' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-04.txt' />
</reference>



<reference anchor="I-D.ietf-tls-tls13">
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<date month='April' day='28' year='2017' />

<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-tls13-20' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-tls13-20.txt' />
</reference>



<reference anchor="I-D.ietf-ipsecme-tcp-encaps">
<front>
<title>TCP Encapsulation of IKE and IPsec Packets</title>

<author initials='T' surname='Pauly' fullname='Tommy Pauly'>
    <organization />
</author>

<author initials='S' surname='Touati' fullname='Samy Touati'>
    <organization />
</author>

<author initials='R' surname='Mantha' fullname='Ravi Mantha'>
    <organization />
</author>

<date month='May' day='31' year='2017' />

<abstract><t>This document describes a method to transport IKE and IPsec packets over a TCP connection for traversing network middleboxes that may block IKE negotiation over UDP.  This method, referred to as TCP encapsulation, involves sending both IKE packets for Security Association establishment and ESP packets over a TCP connection. This method is intended to be used as a fallback option when IKE cannot be negotiated over UDP.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-ipsecme-tcp-encaps-10' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-ipsecme-tcp-encaps-10.txt' />
</reference>


<reference anchor="CurveCP" >
  <front>
    <title>CurveCP -- Usable security for the Internet</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="MinimalT" >
  <front>
    <title>MinimaLT -- Minimal-latency Networking Through Better Security</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAH1VWlkAA+1dW3PjRnZ+x69AjR8sVUh6fBk71lYqkSVNWWvPWGtp7N2k
Uqkm0CThAdEMLtLQW/5necsfy7n2BYA0drKbSirZSnZHJNCX0+fynUsfLpfL
rK/62p7l5/nt0N7bY+42+V1rmu7g2j6/tcXQVv0xv2ld7wpXd5lZr1t7f5b3
/qFOH+pohKx0RWP2MGbZmk2/PJihPi57c+iW/p2lvrOsTW+7Pivhf86yAv57
69rjWV41G5dl1aHFiYau/+T58y+ff5K9tccH15Zn+XXT27ax/fIS58iyrjdN
+S+mdg3Me7RddqjO8n+CJS/yDuZr7aaDfx33+I9/zjIz9DvXnmV5voT/z2G6
7iy/W+U3uFb6hHdw5/b7Y/Spa7dAqsOhtrCCYkWfdTC67c/yj+GjTdVUvc2/
de5A3xWwxbP8YjjYtq8at8gvTF1tXNtUJv/yxfOPP+On3ND0uOs3+HaZ3/ZI
FDyJ871tq8LQU3ZvqhrIQfT8B4OLWBVun+7hYpWfr/IfnSujXVzs2qrr3WFn
2+Tb/wG7KcwDrCbaTda4dm/66t6e0XPfv7z47NPnn4Y/Xrx44f948clnn4c/
vvgkPPb588/DN59/+tkX/o8vPnnxPPrjy/DYF58+/9j/8bfPv5R5rpeXq8r2
m2VfHKqmwP8p2uOhf/Rb27jRd/86VEVg/tkv6248Xt3h/3/86ejz6gCys7c4
0dI2BYgVP3CBwndxw3/gf0Sw5fN8uczfdGYNZ+3lFY4u73fWC5N/dWjhaHZ9
fzj76KMC3y8OK2AW/z2LTxfmwv8sk788R16u8t+v8q9ggq63VUMPvQLG2pv6
TgeQpfLH397hWuUR0g9Nccxf2x4k/23VbPO7XeuG7Q7G7GHdXkdl07WX9coU
e1z6R8C7wFWuWRWb/d9X5d998uLjz7/49IvskQ3Fm6Ft/LiCJRU7Y+v8xvZD
XbvoCRKklN1fVTXM2B7z88KUdn9c5D+CnstvXNX0i/z1nxb5m9vzx6f745D/
484025lJ7m3b4emBQF3XNchh1eWmByEH0dqiUOo/rr99zyS/dw3qg1tXA2n7
3V91rkvTVEC7CSv8tea7M81PJv8WSGjH89y9ya+qpty5e9ss4n8Cj4GKrMGS
dFm2BCY0a1CHpgD7creDlYBhG/a26fND6+6rEk7ZiM3DBYP22rumPuZDB2wA
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

-->

</rfc>

