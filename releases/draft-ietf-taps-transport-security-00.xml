<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.8 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-taps-transport-security-00" category="info">

  <front>
    <title abbrev="transport security survey">A Survey of Transport Security Protocols</title>

    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="C." surname="Perkins" fullname="Colin Perkins">
      <organization>University of Glasgow</organization>
      <address>
        <postal>
          <street>School of Computing Science</street>
          <city>Glasgow  G12 8QQ</city>
          <country>United Kingdom</country>
        </postal>
        <email>csp@csperkins.org</email>
      </address>
    </author>
    <author initials="K." surname="Rose" fullname="Kyle Rose">
      <organization>Akamai Technologies, Inc.</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge, MA 02144</city>
          <country>United States of America</country>
        </postal>
        <email>krose@krose.org</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cawood@apple.com</email>
      </address>
    </author>

    <date year="2018" month="March" day="23"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document provides a survey of commonly used or notable network security protocols, with a focus 
on how they interact and integrate with applications and transport protocols. Its goal is to supplement 
efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to 
add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer Security (DTLS), 
Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, Internet Key Exchange 
with Encapsulating Security Protocol (IKEv2 + ESP), SRTP (with DTLS), and WireGuard. This survey is not 
limited to protocols developed within the scope or context of the IETF.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document provides a survey of commonly used or notable network security protocols, with a focus 
on how they interact and integrate with applications and transport protocols.  Its goal is to supplement 
efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to 
add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer 
Security (DTLS), Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, 
Internet Key Exchange with Encapsulating Security Protocol (IKEv2 + ESP), SRTP (with DTLS), and 
WireGuard. This survey is not limited to protocols developed within the scope or context of the IETF.</t>

<t>For each protocol, this document provides a brief description, the security features it provides, 
and the dependencies it has on the underlying transport. This is followed by defining the set of 
transport security features shared by these protocols. Finally, we distill the application and 
transport interfaces provided by the transport security protocols.</t>

<t>Authentication-only protocols such as TCP-AO <xref target="RFC5925"/> and IPsec AH <xref target="RFC4302"/> are excluded
from this survey. TCP-AO adds authenticity protections to long-lived TCP connections, e.g., replay 
protection  with per-packet Message Authentication Codes. (This protocol obsoletes TCP MD5 “signature” 
options specified in <xref target="RFC2385"/>.) One prime use case of TCP-AO is for protecting BGP connections. 
Similarly, AH adds per-datagram authenticity and adds similar replay protection. Despite these
improvements, neither protocol sees general use and both lack critical properties important for emergent
transport security protocols: confidentiality, privacy protections, and agility. Thus, we omit
these and related protocols from our survey.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The following terms are used throughout this document to describe the roles and interactions of transport security protocols:</t>

<t><list style="symbols">
  <t>Transport Feature: a specific end-to-end feature that the transport layer provides to an application. 
Examples include confidentiality, reliable delivery, ordered delivery, message-versus-stream orientation, etc.</t>
  <t>Transport Service: a set of Transport Features, without an association to any given framing protocol, 
which provides functionality to an application.</t>
  <t>Transport Protocol: an implementation that provides one or more different transport services using a 
specific framing and header format on the wire. A Transport Protocol services an application.</t>
  <t>Application: an entity that uses a transport protocol for end-to-end delivery of data across the network.
This may also be an upper layer protocol or tunnel encapsulation.</t>
  <t>Security Feature: a specific feature that a network security layer provides to applications. Examples 
include authentication, encryption, key generation, session resumption, and privacy. A feature may be 
considered to be Mandatory or Optional to an application’s implementation.</t>
  <t>Security Protocol: a defined network protocol that implements one or more security features. Security 
protocols may be used alongside transport protocols, and in combination with other security protocols when
appropriate.</t>
  <t>Handshake Protocol: a protocol that enables peers to validate each other and to securely establish shared cryptographic context.</t>
  <t>Record Protocol: a security protocol that allows data to be divided into manageable blocks and protected using a shared cryptographic context.</t>
  <t>Session: an ephemeral security association between applications.</t>
  <t>Cryptographic context: a set of cryptographic parameters, including but not necessarily limited to keys for encryption, authentication, and session resumption, enabling authorized parties to a session to communicate securely.</t>
  <t>Connection: the shared state of two or more endpoints that persists across messages that are transmitted 
between these endpoints. A connection is a transient participant of a session, and a session generally lasts 
between connection instances.</t>
  <t>Connection Mobility: a property of a connection that allows it to be multihomed or resilient across network 
interface or address changes.</t>
  <t>Peer: an endpoint application party to a session.</t>
  <t>Client: the peer responsible for initiating a session.</t>
  <t>Server: the peer responsible for responding to a session initiation.</t>
</list></t>

</section>
<section anchor="transport-security-protocol-descriptions" title="Transport Security Protocol Descriptions">

<t>This section contains descriptions of security protocols that currently used to protect data being sent over a network.</t>

<t>For each protocol, we describe the features it provides and its dependencies on other protocols.</t>

<section anchor="tls" title="TLS">

<t>TLS (Transport Layer Security) <xref target="RFC5246"/> is a common protocol used to establish a secure session between two endpoints. Communication
over this session “prevents eavesdropping, tampering, and message forgery.” TLS consists
of a tightly coupled handshake and record protocol. The handshake protocol is used to authenticate peers,
negotiate protocol options, such as cryptographic algorithms, and derive session-specific
keying material. The record protocol is used to marshal (possibly encrypted) data from one
peer to the other. This data may contain handshake messages or raw application data.</t>

<section anchor="protocol-description" title="Protocol Description">

<t>TLS is the composition of a handshake and record protocol <xref target="I-D.ietf-tls-tls13"/>.
The record protocol is designed to marshal an arbitrary, in-order stream of bytes from one endpoint to the other.
It handles segmenting, compressing (when enabled), and encrypting data into discrete records. When configured
to use an AEAD algorithm, it also handles nonce generation and encoding for each record. The record protocol is
hidden from the client behind a byte stream-oriented API.</t>

<t>The handshake protocol serves several purposes, including: peer authentication, protocol option (key exchange
algorithm and ciphersuite) negotiation, and key derivation. Peer authentication may be mutual; however, commonly,
only the server is authenticated. X.509 certificates are commonly used in this authentication step, though
other mechanisms, such as raw public keys <xref target="RFC7250"/>, exist. The client is not authenticated unless explicitly
requested by the server with a CertificateRequest handshake message. Assuming strong cryptography, an infrastructure for trust establishment, correctly-functioning endpoints, and communication patterns free from side channels, server authentication is sufficient to establish a channel resistant to eavesdroppers.</t>

<t>The handshake protocol is also extensible. It allows for a variety of extensions to be included by either the client
or server. These extensions are used to specify client preferences, e.g., the application-layer protocol to be driven
with the TLS connection <xref target="RFC7301"/>, or signals to the server to aid operation, e.g., Server Name Indication (SNI) <xref target="RFC6066"/>. Various extensions also exist
to tune the parameters of the record protocol, e.g., the maximum fragment length <xref target="RFC6066"/>.</t>

<t>Alerts are used to convey errors and other atypical events to the endpoints. There are two classes of alerts: closure
and error alerts. A closure alert is used to signal to the other peer that the sender wishes to terminate the connection.
The sender typically follows a close alert with a TCP FIN segment to close the connection. Error alerts are used to
indicate problems with the handshake or individual records. Most errors are fatal and are followed by connection
termination. However, warning alerts may be handled at the discretion of the implementation.</t>

<t>Once a session is disconnected all session keying material must be destroyed, with the exception of secrets previously established expressly for purposes of session resumption.
TLS supports stateful and stateless resumption. (Here, “state” refers to bookkeeping on a per-session basis
by the server. It is assumed that the client must always store some state information in order to resume a session.)</t>

</section>
<section anchor="protocol-features" title="Protocol Features">

<t><list style="symbols">
  <t>Key exchange and ciphersuite algorithm negotiation.</t>
  <t>Stateful and stateless session resumption.</t>
  <t>Certificate- and raw public key-based authentication.</t>
  <t>Mutual client and server authentication.</t>
  <t>Byte stream confidentiality and integrity.</t>
  <t>Extensibility via well-defined extensions.</t>
  <t>0-RTT data support (starting with TLS 1.3).</t>
  <t>Application-layer protocol negotiation.</t>
  <t>Transparent data segmentation.</t>
</list></t>

<!-- caw: possibles to add -->
<!-- - identity hiding -->

</section>
<section anchor="protocol-dependencies" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP for in-order, reliable transport.</t>
  <t>(Optionally) A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="dtls" title="DTLS">

<t>DTLS (Datagram Transport Layer Security) <xref target="RFC6347"/> is based on TLS, but differs in that
it is designed to run over UDP instead of TCP. Since UDP does not guarantee datagram
ordering or reliability, DTLS modifies the protocol to make sure it can still provide
the same security guarantees as TLS. DTLS was designed to be as close to TLS as possible,
so this document will assume that all properties from TLS are carried over except where specified.</t>

<section anchor="protocol-description-1" title="Protocol Description">

<t>DTLS is modified from TLS to account for packet loss, reordering, and duplication that may occur when operating over UDP. To enable out-of-order delivery of application data, the DTLS record protocol itself has no inter-record dependencies. However, as the handshake requires reliability, each handshake message is assigned an explicit sequence number to enable retransmissions of lost packets and in-order processing by the receiver. Handshake message loss is remedied by sender retransmission after a configurable period in which the expected response has not yet been received.</t>

<t>As the DTLS handshake protocol runs atop the record protocol, to account for long handshake messages that cannot fit within a single record, DTLS supports fragmentation and subsequent reconstruction of handshake messages across records. The receiver must reassemble records before processing.</t>

<t>DTLS relies on unique UDP 4-tuples to allow peers with multiple DTLS connections between them to demultiplex connections, constraining protocol design slightly more than UDP: application-layer demultiplexing over the same 4-tuple is not possible without trial decryption as all application-layer data is encrypted to a connection-specific cryptographic context. Starting with DTLS 1.3 <xref target="I-D.ietf-tls-dtls13"/>, a connection identifier extension to permit multiplexing of independent connections over the same 4-tuple is available <xref target="I-D.ietf-tls-dtls-connection-id"/>.</t>

<t>Since datagrams may be replayed, DTLS provides optional anti-replay detection based on a window of acceptable sequence numbers <xref target="RFC6347"/>.</t>

</section>
<section anchor="protocol-features-1" title="Protocol Features">

<t><list style="symbols">
  <t>Anti-replay protection between datagrams.</t>
  <t>Basic reliability for handshake messages.</t>
  <t>See also the features from TLS.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-1" title="Protocol Dependencies">

<t><list style="symbols">
  <t>Since DTLS runs over an unreliable, unordered datagram transport, it does not require any reliability features.</t>
  <t>The DTLS record protocol explicitly encodes record lengths, so although it runs over a datagram transport, it does not rely on the transport protocol’s framing beyond requiring transport-level reconstruction of datagrams fragmented over packets.</t>
  <t>UDP 4-tuple uniqueness, or the connection identifier extension, for demultiplexing.</t>
  <t>Path MTU discovery.</t>
</list></t>

</section>
</section>
<section anchor="ietf-quic-with-tls" title="(IETF) QUIC with TLS">

<t>QUIC (Quick UDP Internet Connections) is a new standards-track transport protocol that runs over 
UDP, loosely based on Google’s original proprietary gQUIC protocol. (See <xref target="section-gquic"/> for more details.)
The QUIC transport layer itself provides support for data confidentiality and integrity.
This requires keys to be derived with a separate handshake protocol.
A mapping for QUIC over TLS 1.3 <xref target="I-D.ietf-quic-tls"/> has been specified to provide this handshake.</t>

<section anchor="protocol-description-2" title="Protocol Description">

<t>As QUIC relies on TLS to secure its transport functions, it creates specific integration points
between its security and transport functions:</t>

<t><list style="symbols">
  <t>Starting the handshake to generate keys and provide authentication (and providing the transport for the handshake).</t>
  <t>Client address validation.</t>
  <t>Key ready events from TLS to notify the QUIC transport.</t>
  <t>Exporting secrets from TLS to the QUIC transport.</t>
</list></t>

<t>The QUIC transport layer support multiple streams over a single connection. The first
stream is reserved specifically for a TLS connection. The TLS handshake, along with
further records, are sent over this stream. This TLS connection follows the TLS standards
and inherits the security properties of TLS. The handshake generates keys, which are
then exported to the rest of the QUIC connection, and are used to protect the rest of the streams.</t>

<t>Initial QUIC messages (packets) are encrypted using “fixed” keys derived from the QUIC version and 
public packet information (Connection ID). Packets are later encrypted using keys derived
from the TLS traffic secret upon handshake completion. The TLS 1.3
handshake for QUIC is used in either a single-RTT mode or a fast-open zero-RTT mode. When
zero-RTT handshakes are possible, the encryption first transitions to use the zero-RTT keys
before using single-RTT handshake keys after the next TLS flight.</t>

</section>
<section anchor="protocol-features-2" title="Protocol Features">

<t><list style="symbols">
  <t>Handshake properties of TLS.</t>
  <t>Multiple encrypted streams over a single connection without head-of-line blocking.</t>
  <t>Packet payload encryption and complete packet authentication (with the exception of the 
Public Reset packet, which is not authenticated).</t>
</list></t>

</section>
<section anchor="protocol-dependencies-2" title="Protocol Dependencies">

<t><list style="symbols">
  <t>QUIC transport relies on UDP.</t>
  <t>QUIC transport relies on TLS 1.3 for authentication and initial key derivation.</t>
  <t>TLS within QUIC relies on a reliable stream abstraction for its handshake.</t>
</list></t>

</section>
</section>
<section anchor="section-gquic" title="gQUIC">

<t>gQUIC is a UDP-based multiplexed streaming protocol designed and deployed by Google 
following experience from deploying SPDY, the proprietary predecessor to HTTP/2.
gQUIC was originally known as “QUIC”: this document uses gQUIC to unambiguously distinguish 
it from the standards-track IETF QUIC. The proprietary technical forebear of IETF QUIC, gQUIC 
was originally designed with tightly-integrated security and application data transport protocols.</t>

<section anchor="protocol-description-3" title="Protocol Description">

<t>((TODO: write me))</t>

</section>
<section anchor="protocol-dependencies-3" title="Protocol Dependencies">

<t>((TODO: write me))</t>

</section>
</section>
<section anchor="minimalt" title="MinimalT">

<t>MinimalT is a UDP-based transport security protocol designed to offer confidentiality, mutual authentication, DoS prevention, and connection
mobility <xref target="MinimalT"/>. One major goal of the protocol is to leverage existing protocols to obtain server-side configuration information used to
more quickly bootstrap a connection. MinimalT uses a variant of TCP’s congestion control algorithm.</t>

<section anchor="protocol-description-4" title="Protocol Description">

<t>MinimalT is a secure transport protocol built on top of a widespread directory service. Clients and servers interact with local directory
services to (a) resolve server information and (b) public ephemeral state information, respectively. Clients connect to a local
resolver once at boot time. Through this resolver they recover the IP address(es) and public key(s) of each server to which
they want to connect.</t>

<t>Connections are instances of user-authenticated, mobile sessions between two endpoints. Connections run within tunnels between hosts. A tunnel
is a server-authenticated container that multiplexes multiple connections between the same hosts. All connections in a tunnel share the
same transport state machine and encryption. Each tunnel has a dedicated control connection used to configure and manage the tunnel over time.
Moreover, since tunnels are independent of the network address information, they may be reused as both ends of the tunnel move about the network.
This does however imply that the connection establishment and packet encryption mechanisms are coupled.</t>

<t>Before a client connects to a remote service, it must first establish a tunnel to the host providing or offering the service. Tunnels are established
in 1-RTT using an ephemeral key obtained from the directory service. Tunnel initiators provide their own ephemeral key and, optionally, a
DoS puzzle solution such that the recipient (server) can verify the authenticity of the request and derive a shared secret. Within a tunnel,
new connections to services may be established.</t>

</section>
<section anchor="protocol-features-3" title="Protocol Features">

<t><list style="symbols">
  <t>0-RTT forward secrecy for new connections.</t>
  <t>DoS prevention by client-side puzzles.</t>
  <t>Tunnel-based mobility.</t>
  <t>(Transport Feature) Connection multiplexing between hosts across shared tunnels.</t>
  <t>(Transport Feature) Congestion control state is shared across connections between the same host pairs.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-4" title="Protocol Dependencies">

<t><list style="symbols">
  <t>A DNS-like resolution service to obtain location information (an IP address) and ephemeral keys.</t>
  <t>A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="curvecp" title="CurveCP">

<t>CurveCP <xref target="CurveCP"/> is a UDP-based transport security protocol from Daniel J. Bernstein.
Unlike other transport security protocols, it is based entirely upon highly efficient public
key algorithms. This removes many pitfalls associated with nonce reuse and key synchronization.</t>

<section anchor="protocol-description-5" title="Protocol Description">

<t>CurveCP is a UDP-based transport security protocol. It is built on three principal features: exclusive use of public key authenticated
encryption of packets, server-chosen cookies to prohibit memory and computation DoS at the server, and connection mobility with a
client-chosen ephemeral identifier.</t>

<t>There are two rounds in CurveCP. In the first round, the client sends its first initialization packet to the server, carrying its (possibly fresh)
ephemeral public key C’, with zero-padding encrypted under the server’s long-term public key. The server replies with a cookie and its own ephemeral
key S’ and a cookie that is to be used by the client. Upon receipt, the client then generates its second initialization packet carrying: the
ephemeral key C’, cookie, and an encryption of C’, the server’s domain name, and, optionally, some message data. The server verifies the cookie
and the encrypted payload and, if valid, proceeds to send data in return. At this point, the connection is established and the two
parties can communicate.</t>

<t>The use of only public-key encryption and authentication, or “boxing”, is done to simplify problems that come with symmetric key management
and synchronization. For example, it allows the sender of a message to be in complete control of each message’s nonce. It does not require
either end to share secret keying material.
Furthermore, it allows connections (or sessions) to be associated with unique ephemeral public keys as a mechanism for enabling forward secrecy given the risk of long-term private key compromise.</t>

<t>The client and server do not perform a standard key exchange. Instead, in the initial exchange of packets, each party provides its
own ephemeral key to the other end. The client can choose a new ephemeral key for every new connection. However, the server must rotate
these keys on a slower basis. Otherwise, it would be trivial for an attacker to force the server to create and store ephemeral keys
with a fake client initialization packet.</t>

<t>Unlike TCP, the server employs cookies to enable source validation. After receiving the client’s initial packet, encrypted under the server’s
long-term public key, the server generates and returns a stateless cookie that must be echoed back in the client’s following message.
This cookie is encrypted under the client’s ephemeral public key.
This stateless technique prevents attackers from hijacking client initialization packets to obtain cookie values to flood clients. (A client
would detect the duplicate cookies and reject the flooded packets.) Similarly, replaying the client’s second packet, carrying the cookie,
will be detected by the server.</t>

<t>CurveCP supports a weak form of client authentication. Clients are permitted to send their long-term public keys in the second initialization
packet. A server can verify this public key and, if untrusted, drop the connection and subsequent data.</t>

<t>Unlike some other protocols, CurveCP data packets leave only the ephemeral public key, the connection ID, and the per-message nonce
in the clear. Everything else is encrypted.</t>

</section>
<section anchor="protocol-features-4" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure data encryption and authentication.</t>
  <t>Per-packet public-key encryption.</t>
  <t>1-RTT session bootstrapping.</t>
  <t>Connection mobility based on a client-chosen ephemeral identifier.</t>
  <t>Connection establishment message padding to prevent traffic amplification.</t>
  <t>Sender-chosen explicit nonces, e.g., based on a sequence number.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-5" title="Protocol Dependencies">

<t><list style="symbols">
  <t>An unreliable transport protocol such as UDP.</t>
</list></t>

</section>
</section>
<section anchor="tcpcrypt" title="tcpcrypt">

<t>Tcpcrypt is a lightweight extension to the TCP protocol to enable opportunistic encryption with hooks available to the application layer for implementation of endpoint authentication.</t>

<section anchor="protocol-description-6" title="Protocol Description">

<t>Tcpcrypt extends TCP to enable opportunistic encryption between the two ends of a TCP connection <xref target="I-D.ietf-tcpinc-tcpcrypt"/>.
It is a family of TCP encryption protocols (TEP), distinguished by key exchange algorithm.
The use of a TEP is negotiated with a TCP option during the initial TCP handshake via the mechanism described by TCP Encryption Negotiation Option (ENO) <xref target="I-D.ietf-tcpinc-tcpeno"/>.
In the case of initial session establishment, once a tcpcrypt TEP has been negotiated the key exchange occurs within the data segments of the first few packets exchanged after the handshake completes. The initiator of a connection sends a list of supported AEAD algorithms, a random nonce, and an ephemeral public key share.
The responder typically chooses a mutually-supported AEAD algorithm and replies with this choice, its own nonce, and ephemeral key share.
An initial shared secret is derived from the ENO handshake, the tcpcrypt handshake, and the initial keying material resulting from the key exchange. The traffic encryption keys on the initial connection are derived from the shared secret.
Connections can be re-keyed before the natural AEAD limit for a single set of traffic encryption keys is reached.</t>

<t>Each tcpcrypt session is associated with a ladder of resumption IDs, each derived from the respective entry in a ladder of shared secrets.
These resumption IDs can be used to negotiate a stateful resumption of the session in a subsequent connection, resulting in use of a new shared secret and traffic encryption keys without requiring a new key exchange.
Willingness to resume a session is signaled via the ENO option during the TCP handshake.
Given the length constraints imposed by TCP options, unlike stateless resumption mechanisms (such as that provided by session tickets in TLS) resumption in tcpcrypt requires the maintenance of state on the server, and so successful resumption across a pool of servers implies shared state.</t>

<t>Owing to middlebox ossification issues, tcpcrypt only protects the payload portion of a TCP packet.
It does not encrypt any header information, such as the TCP sequence number.</t>

<t>Tcpcrypt exposes a universally-unique connection-specific session ID to the application, suitable for application-level endpoint authentication either in-band or out-of-band.</t>

</section>
<section anchor="protocol-features-5" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure TCP payload encryption and integrity protection.</t>
  <t>Session caching and address-agnostic resumption.</t>
  <t>Connection re-keying.</t>
  <t>Application-level authentication primitive.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-6" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP</t>
  <t>TCP Encryption Negotiation Option (ENO)</t>
</list></t>

</section>
</section>
<section anchor="ikev2-with-esp" title="IKEv2 with ESP">

<t>IKEv2 <xref target="RFC7296"/> and ESP <xref target="RFC4303"/> together form the modern IPsec protocol suite that encrypts and authenticates IP packets, either as for creating tunnels (tunnel-mode) or for direct transport connections (transport-mode). This suite of protocols separates out the key generation protocol (IKEv2) from the transport encryption protocol (ESP). Each protocol can be used independently, but this document considers them together, since that is the most common pattern.</t>

<section anchor="protocol-descriptions" title="Protocol descriptions">

<section anchor="ikev2" title="IKEv2">

<t>IKEv2 is a control protocol that runs on UDP port 500. Its primary goal is to generate keys for Security Associations (SAs). It first uses a Diffie-Hellman key exchange to generate keys for the “IKE SA”, which is a set of keys used to encrypt further IKEv2 messages. It then goes through a phase of authentication in which both peers present blobs signed by a shared secret or private key, after which another set of keys is derived, referred to as the “Child SA”. These Child SA keys are used by ESP.</t>

<t>IKEv2 negotiates which protocols are acceptable to each peer for both the IKE and Child SAs using “Proposals”. Each proposal may contain an encryption algorithm, an authentication algorithm, a Diffie-Hellman group, and (for IKE SAs only) a pseudorandom function algorithm. Each peer may support multiple proposals, and the most preferred mutually supported proposal is chosen during the handshake.</t>

<t>The authentication phase of IKEv2 may use Shared Secrets, Certificates, Digital Signatures, or an EAP (Extensible Authentication Protocol) method. At a minimum, IKEv2 takes two round trips to set up both an IKE SA and a Child SA. If EAP is used, this exchange may be expanded.</t>

<t>Any SA used by IKEv2 can be rekeyed upon expiration, which is usually based either on time or number of bytes encrypted.</t>

<t>There is an extension to IKEv2 that allows session resumption <xref target="RFC5723"/>.</t>

<t>MOBIKE is a Mobility and Multihoming extension to IKEv2 that allows a set of Security Associations to migrate over different addresses and interfaces <xref target="RFC4555"/>.</t>

<t>When UDP is not available or well-supported on a network, IKEv2 may be encapsulated in TCP <xref target="RFC8229"/>.</t>

</section>
<section anchor="esp" title="ESP">

<t>ESP is a protocol that encrypts and authenticates IPv4 and IPv6 packets. The keys used for both encryption and authentication can be derived from an IKEv2 exchange. ESP Security Associations come as pairs, one for each direction between two peers. Each SA is identified by a Security Parameter Index (SPI), which is marked on each encrypted ESP packet.</t>

<t>ESP packets include the SPI, a sequence number, an optional Initialization Vector (IV), payload data, padding, a length and next header field, and an Integrity Check Value.</t>

<t>From <xref target="RFC4303"/>, “ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.”</t>

<t>Since ESP operates on IP packets, it is not directly tied to the transport protocols it encrypts. This means it requires little or no change from transports in order to provide security.</t>

<t>ESP packets may be sent directly over IP, but where network conditions warrant (e.g., when a NAT is present or when a firewall blocks such packets) they may be encapsulated in UDP <xref target="RFC3948"/> or TCP <xref target="RFC8229"/>.</t>

</section>
</section>
<section anchor="protocol-features-6" title="Protocol features">

<section anchor="ikev2-1" title="IKEv2">

<t><list style="symbols">
  <t>Encryption and authentication of handshake packets.</t>
  <t>Cryptographic algorithm negotiation.</t>
  <t>Session resumption.</t>
  <t>Mobility across addresses and interfaces.</t>
  <t>Peer authentication extensibility based on shared secret, certificates, digital signatures, or EAP methods.</t>
</list></t>

</section>
<section anchor="esp-1" title="ESP">

<t><list style="symbols">
  <t>Data confidentiality and authentication.</t>
  <t>Connectionless integrity.</t>
  <t>Anti-replay protection.</t>
  <t>Limited flow confidentiality.</t>
</list></t>

</section>
</section>
<section anchor="protocol-dependencies-7" title="Protocol dependencies">

<section anchor="ikev2-2" title="IKEv2">

<t><list style="symbols">
  <t>Availability of UDP to negotiate, or implementation support for TCP-encapsulation.</t>
  <t>Some EAP authentication types require accessing a hardware device, such as a SIM card; or interacting with a user, such as password prompting.</t>
</list></t>

</section>
<section anchor="esp-2" title="ESP">

<t><list style="symbols">
  <t>Since ESP is below transport protocols, it does not have any dependencies on the transports themselves, other than on UDP or TCP where encapsulation is employed.</t>
</list></t>

</section>
</section>
</section>
<section anchor="wireguard" title="WireGuard">

<t>WireGuard is a layer 3 protocol designed to complement or replace IPsec <xref target="WireGuard"/>.
Unlike most transport security protocols, which rely on PKI for peer authentication, 
WireGuard authenticates peers using pre-shared public keys delivered out-of-band, each 
of which is bound to one or more IP addresses. 
Moreover, as a protocol suited for VPNs, WireGuard offers no extensibility, negotiation, 
or cryptographic agility.</t>

<section anchor="protocol-description-7" title="Protocol description">

<t>WireGuard is a simple VPN protocol that binds a pre-shared public key to one or more
IP addresses. Users configure WireGuard by associating peer public keys with IP addresses. 
These mappings are stored in a CryptoKey Routing Table. (See Section 2 of <xref target="WireGuard"/>
for more details and sample configurations.) These keys are used upon WireGuard packet 
transmission and reception. For example, upon receipt of a Handshake Initiation message,
receivers use the static public key in their CryptoKey routing table to perform necessary
cryptographic computations.</t>

<t>WireGuard builds on Noise <xref target="Noise"/> for 1-RTT key exchange with identity hiding. The handshake
hides peer identities as per the SIGMA construction <xref target="SIGMA"/>. As a consequence of using Noise, 
WireGuard comes with a fixed set of cryptographic algorithms:</t>

<t><list style="symbols">
  <t>x25519 <xref target="Curve25519"/> and HKDF <xref target="RFC5869"/> for ECDH and key derivation.</t>
  <t>ChaCha20+Poly1305 <xref target="RFC7539"/> for packet authenticated encryption.</t>
  <t>BLAKE2s <xref target="BLAKE2"/> for hashing.</t>
</list></t>

<t>There is no cryptographic agility. If weaknesses are found in any of
these algorithms, new message types using new algorithms must be introduced.</t>

<t>WireGuard is designed to be entirely stateless, modulo the CryptoKey routing table, which has size
linear with the number of trusted peers. If a WireGuard receiver is under heavy load and cannot process
a packet, e.g., cannot spare CPU cycles for point multiplication, it can reply with a cookie similar
to DTLS and IKEv2. This cookie only proves IP address ownership. Any rate limiting scheme can be applied
to packets coming from non-spoofed addresses.</t>

</section>
<section anchor="protocol-features-7" title="Protocol features">

<t><list style="symbols">
  <t>Optional PSK-based session creation.</t>
  <t>Mutual client and server authentication.</t>
  <t>Stateful, timestamp-based replay prevention.</t>
  <t>Cookie-based DoS mitigation similar to DTLS and IKEv2.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-8" title="Protocol dependencies">

<t><list style="symbols">
  <t>Datagram transport.</t>
  <t>Out-of-band key distribution and management.</t>
</list></t>

</section>
</section>
<section anchor="srtp-with-dtls" title="SRTP (with DTLS)">

<t>SRTP – Secure RTP – is a profile for RTP that provides confidentiality, message 
authentication, and replay protection for data and control packets <xref target="RFC3711"/>.
SRTP packets are encrypted using a session key, which is derived from a separate
master key. Master keys are derived and managed externally, e.g., via DTLS, as specified
in RFC 5763 <xref target="RFC5763"/>, under the control of a signaling protocol such as SIP <xref target="RFC3261"/>
or WebRTC <xref target="I-D.ietf-rtcweb-security-arch"/>.</t>

<section anchor="protocol-descriptions-1" title="Protocol descriptions">

<t>SRTP adds confidentiality and optional integrity protection to RTP data packets,
and adds confidentially and mandatory integrity protection to RTP control (RTCP) packets.
For RTP data packets, this is done by encrypting the payload section of the packet
and optionally appending an authentication tag (MAC) as a packet trailer, with the RTP
header authenticated but not encrypted. The RTP header itself is left unencrypted
to enable RTP header compression <xref target="RFC2508"/><xref target="RFC3545"/>. For RTCP packets, the first packet
in the compound RTCP packet is partially encrypted, leaving the first eight octets of
the header as cleartext to allow identification of the packet as RTCP, while the remainder 
of the compound packet is fully encrypted. The entire RTCP packet is then authenticated
by appending a MAC as packet trailer.</t>

<t>Packets are encrypted using session keys, which
are ultimately derived from a master key and some additional master salt and session salt.
SRTP packets carry a 2-byte sequence number to partially identify the unique packet
index. SRTP peers maintain a separate rollover counter (ROC) for RTP data packets that is 
incremented whenever the sequence number wraps. The sequence number and ROC together 
determine the packet index. RTCP packets have a similar, yet differently named, field
called the RTCP index which serves the same purpose.</t>

<t>Numerous encryption modes are supported. For popular modes of operation, e.g., AES-CTR, 
the (unique) initialization vector (IV) used for each encryption mode is a function of 
the RTP SSRC (synchronization source), packet index, and session “salting key”.</t>

<t>SRTP offers replay detection by keeping a replay list of already seen and processed packet indices. 
If a packet arrives with an index that matches one in the replay list, it is silently discarded.</t>

<t>DTLS <xref target="RFC5764"/> is commonly used as a way to perform mutual authentication and key 
agreement for SRTP <xref target="RFC5763"/>. (Here, certificates marshal public keys between
endpoints. Thus, self-signed certificates may be used if peers do not mutually trust one another, 
as is common on the Internet.) When DTLS is used, certificate fingerprints are transmitted
out-of-band using SIP. Peers typically verify that DTLS-offered certificates match
that which are offered over SIP. This prevents active attacks on RTP, but not on the signaling (SIP or
WebRTC) channel.</t>

</section>
<section anchor="protocol-features-8" title="Protocol features">

<t><list style="symbols">
  <t>Optional replay protection with tunable replay windows.</t>
  <t>Out-of-order packet receipt.</t>
  <t>(RFC5763) Mandatory mutually authenticated key exchange.</t>
  <t>Partial encryption, protecting media payloads and control packets but not data packet headers.</t>
  <t>Optional authentication of data packets; mandatory authentication of control packets.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-9" title="Protocol dependencies">

<t><list style="symbols">
  <t>External key derivation and management mechanism or protocol, e.g., DTLS <xref target="RFC5763"/>.</t>
  <t>External signaling protocol to manage RTP parameters and locate and identify peers, e.g., SIP <xref target="RFC3261"/> or WebRTC <xref target="I-D.ietf-rtcweb-security-arch"/>.</t>
</list></t>

</section>
</section>
</section>
<section anchor="common-transport-security-features" title="Common Transport Security Features">

<t>There exists a common set of features shared across the transport protocols surveyed in this document.
The mandatory features should be provided by any transport security protocol, while the optional features
are extensions that a subset of the protocols provide. For clarity, we also distinguish between handshake
and record features.</t>

<section anchor="mandatory-features" title="Mandatory Features">

<section anchor="handshake" title="Handshake">

<t><list style="symbols">
  <t>Forward-secure segment encryption and authentication: Transit data must be protected with an
authenticated encryption algorithm.</t>
  <t>Private key interface or injection: Authentication based on public key signatures is commonplace for
many transport security protocols.</t>
  <t>Endpoint authentication: The endpoint (receiver) of a new connection must be authenticated before any
data is sent to said party.</t>
  <t>Source validation: Source validation must be provided to mitigate server-targeted DoS attacks. This can
be done with puzzles or cookies.</t>
</list></t>

</section>
<section anchor="record" title="Record">

<t><list style="symbols">
  <t>Pre-shared key support: A record protocol must be able to use a pre-shared key established
out-of-band to encrypt individual messages, packets, or datagrams.</t>
</list></t>

</section>
</section>
<section anchor="optional-features" title="Optional Features">

<section anchor="handshake-1" title="Handshake">

<t><list style="symbols">
  <t>Mutual authentication: Transport security protocols must allow each endpoint to authenticate the other if required by the application.</t>
  <t>Application-layer feature negotiation: The type of application using a transport security protocol often requires
features configured at the connection establishment layer, e.g., ALPN <xref target="RFC7301"/>. Moreover, application-layer features may often be used to
offload the session to another server which can better handle the request. (The TLS SNI is one example of such a feature.)
As such, transport security protocols should provide a generic mechanism to allow for such application-specific features
and options to be configured or otherwise negotiated.</t>
  <t>Configuration extensions: The protocol negotiation should be extensible with addition of new configuration options.</t>
  <t>Session caching and management: Sessions should be cacheable to enable reuse and amortize the cost of performing
session establishment handshakes.</t>
</list></t>

</section>
<section anchor="record-1" title="Record">

<t><list style="symbols">
  <t>Connection mobility: Sessions should not be bound to a network connection (or 5-tuple). This allows cryptographic
key material and other state information to be reused in the event of a connection change. Examples of this include
a NAT rebinding that occurs without a client’s knowledge.</t>
</list></t>

</section>
</section>
</section>
<section anchor="transport-security-protocol-interfaces" title="Transport Security Protocol Interfaces">

<t>This section describes the interface surface exposed by the security protocols described
above, with each interface. Note that not all protocols support each interface.</t>

<section anchor="configuration-interfaces" title="Configuration Interfaces">

<t>Configuration interfaces are used to configure the security protocols before a
handshake begins or the keys are negotiated.</t>

<t><list style="symbols">
  <t>Identity and Private Keys<vspace />
The application can provide its identities (certificates) and private keys, or
mechanisms to access these, to the security protocol to use during handshakes.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP</t>
  <t>Supported Algorithms (Key Exchange, Signatures, and Ciphersuites)<vspace />
The application can choose the algorithms that are supported for key exchange,
signatures, and ciphersuites.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2, SRTP</t>
  <t>Session Cache<vspace />
The application provides the ability to save and retrieve session state (such as tickets,
keying material, and server parameters) that may be used to resume the security session.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT</t>
  <t>Authentication Delegation<vspace />
The application provides access to a separate module that will provide authentication,
using EAP for example.<vspace />
Protocols: IKEv2, SRTP</t>
</list></t>

</section>
<section anchor="handshake-interfaces" title="Handshake Interfaces">

<t>Handshake interfaces are the points of interaction between a handshake protocol and
the application, record protocol, and transport once the handshake is active.</t>

<t><list style="symbols">
  <t>Send Handshake Messages<vspace />
The handshake protocol needs to be able to send messages over a transport to the remote peer to establish trust and to negotiate keys.<vspace />
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP (DTLS))</t>
  <t>Receive Handshake Messages<vspace />
The handshake protocol needs to be able to receive messages from the remote peer
over a transport to establish trust and to negotiate keys.<vspace />
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP (DTLS))</t>
  <t>Identity Validation<vspace />
During a handshake, the security protocol will conduct identity validation of the peer.
This can call into the application to offload validation.
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP (DTLS))</t>
  <t>Source Address Validation<vspace />
The handshake protocol may delegate validation of the remote peer that has sent
data to the transport protocol or application. This involves sending a cookie
exchange to avoid DoS attacks.<vspace />
Protocols: QUIC + TLS, DTLS, WireGuard</t>
  <t>Key Update<vspace />
The handshake protocol may be instructed to update its keying material, either
by the application directly or by the record protocol sending a key expiration event.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2</t>
  <t>Pre-Shared Key Export<vspace />
The handshake protocol will generate one or more keys to be used for record encryption/decryption and authentication. These may be explicitly exportable to the application, traditionally limited to direct export to the record protocol, or inherently non-exportable because the keys must be used directly in conjunction with the record protocol.  <list style="symbols">
      <t>Explict export: TLS (for QUIC), tcpcrypt, IKEv2, DTLS (for SRTP)</t>
      <t>Direct export: TLS, DTLS, MinimalT</t>
      <t>Non-exportable: CurveCP</t>
    </list></t>
</list></t>

</section>
<section anchor="record-interfaces" title="Record Interfaces">

<t>Record interfaces are the points of interaction between a record protocol and the application, handshake protocol, and transport once in use.</t>

<t><list style="symbols">
  <t>Pre-Shared Key Import<vspace />
Either the handshake protocol or the application directly can supply pre-shared keys for the record protocol use for encryption/decryption and authentication. If the application can supply keys directly, this is considered explicit import; if the handshake protocol traditionally provides the keys directly, it is considered direct import; if the keys can only be shared by the handshake, they are considered non-importable.
  <list style="symbols">
      <t>Explict import: QUIC, ESP</t>
      <t>Direct import: TLS, DTLS, MinimalT, tcpcrypt, WireGuard</t>
      <t>Non-importable: CurveCP</t>
    </list></t>
  <t>Encrypt application data<vspace />
The application can send data to the record protocol to encrypt it into a format that can be sent on the underlying transport. The encryption step may require that the application data is treated as a stream or as datagrams, and that the transport to send the encrypted records present a stream or datagram interface.
  <list style="symbols">
      <t>Stream-to-Stream Protocols: TLS, tcpcrypt</t>
      <t>Datagram-to-Datagram Protocols: DTLS, ESP, SRTP, WireGuard</t>
      <t>Stream-to-Datagram Protocols: QUIC ((Editor’s Note: This depends on the interface QUIC exposes to applications.))</t>
    </list></t>
  <t>Decrypt application data<vspace />
The application can receive data from its transport to be decrypted using record protocol. The decryption step may require that the incoming transport data is presented as a stream or as datagrams, and that the resulting application data is a stream or datagrams.
  <list style="symbols">
      <t>Stream-to-Stream Protocols: TLS, tcpcrypt</t>
      <t>Datagram-to-Datagram Protocols: DTLS, ESP, SRTP, WireGuard</t>
      <t>Datagram-to-Stream Protocols: QUIC ((Editor’s Note: This depends on the interface QUIC exposes to applications.))</t>
    </list></t>
  <t>Key Expiration<vspace />
The record protocol can signal that its keys are expiring due to reaching a time-based deadline, or a use-based deadline (number of bytes that have been encrypted with the key). This interaction is often limited to signaling between the record layer and the handshake layer.<vspace />
Protocols: ESP ((Editor’s note: One may consider TLS/DTLS to also have this interface))</t>
  <t>Transport mobility<vspace />
The record protocol can be signaled that it is being migrated to another transport or interface due to connection mobility, which may reset address and state validation.<vspace />
Protocols: QUIC, MinimalT, CurveCP, ESP, WireGuard (roaming)</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no request to IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document summarizes existing transport security protocols and their interfaces. 
It does not propose changes to or recommend usage of reference protocols.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>The authors would like to thank Mirja Kühlewind, Brian Trammell, Yannick Sierra,
Frederic Jacobs, and Bob Bradley for their input and feedback on earlier versions
of this draft.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2385" target='https://www.rfc-editor.org/info/rfc2385'>
<front>
<title>Protection of BGP Sessions via the TCP MD5 Signature Option</title>
<author initials='A.' surname='Heffernan' fullname='A. Heffernan'><organization /></author>
<date year='1998' month='August' />
<abstract><t>This memo describes a TCP extension to enhance security for BGP. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2385'/>
<seriesInfo name='DOI' value='10.17487/RFC2385'/>
</reference>



<reference  anchor="RFC2508" target='https://www.rfc-editor.org/info/rfc2508'>
<front>
<title>Compressing IP/UDP/RTP Headers for Low-Speed Serial Links</title>
<author initials='S.' surname='Casner' fullname='S. Casner'><organization /></author>
<author initials='V.' surname='Jacobson' fullname='V. Jacobson'><organization /></author>
<date year='1999' month='February' />
<abstract><t>This document describes a method for compressing the headers of IP/UDP/RTP datagrams to reduce overhead on low-speed serial links. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2508'/>
<seriesInfo name='DOI' value='10.17487/RFC2508'/>
</reference>



<reference  anchor="RFC3261" target='https://www.rfc-editor.org/info/rfc3261'>
<front>
<title>SIP: Session Initiation Protocol</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'><organization /></author>
<author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'><organization /></author>
<author initials='G.' surname='Camarillo' fullname='G. Camarillo'><organization /></author>
<author initials='A.' surname='Johnston' fullname='A. Johnston'><organization /></author>
<author initials='J.' surname='Peterson' fullname='J. Peterson'><organization /></author>
<author initials='R.' surname='Sparks' fullname='R. Sparks'><organization /></author>
<author initials='M.' surname='Handley' fullname='M. Handley'><organization /></author>
<author initials='E.' surname='Schooler' fullname='E. Schooler'><organization /></author>
<date year='2002' month='June' />
<abstract><t>This document describes Session Initiation Protocol (SIP), an application-layer control (signaling) protocol for creating, modifying, and terminating sessions with one or more participants.  These sessions include Internet telephone calls, multimedia distribution, and multimedia conferences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3261'/>
<seriesInfo name='DOI' value='10.17487/RFC3261'/>
</reference>



<reference  anchor="RFC3545" target='https://www.rfc-editor.org/info/rfc3545'>
<front>
<title>Enhanced Compressed RTP (CRTP) for Links with High Delay, Packet Loss and Reordering</title>
<author initials='T.' surname='Koren' fullname='T. Koren'><organization /></author>
<author initials='S.' surname='Casner' fullname='S. Casner'><organization /></author>
<author initials='J.' surname='Geevarghese' fullname='J. Geevarghese'><organization /></author>
<author initials='B.' surname='Thompson' fullname='B. Thompson'><organization /></author>
<author initials='P.' surname='Ruddy' fullname='P. Ruddy'><organization /></author>
<date year='2003' month='July' />
<abstract><t>This document describes a header compression scheme for point to point links with packet loss and long delays.  It is based on Compressed Real-time Transport Protocol (CRTP), the IP/UDP/RTP header compression described in RFC 2508.  CRTP does not perform well on such links: packet loss results in context corruption and due to the long delay, many more packets are discarded before the context is repaired.  To correct the behavior of CRTP over such links, a few extensions to the protocol are specified here.  The extensions aim to reduce context corruption by changing the way the compressor updates the context at the decompressor: updates are repeated and include updates to full and differential context parameters.  With these extensions, CRTP performs well over links with packet loss, packet reordering and long delays.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3545'/>
<seriesInfo name='DOI' value='10.17487/RFC3545'/>
</reference>



<reference  anchor="RFC3711" target='https://www.rfc-editor.org/info/rfc3711'>
<front>
<title>The Secure Real-time Transport Protocol (SRTP)</title>
<author initials='M.' surname='Baugher' fullname='M. Baugher'><organization /></author>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='M.' surname='Naslund' fullname='M. Naslund'><organization /></author>
<author initials='E.' surname='Carrara' fullname='E. Carrara'><organization /></author>
<author initials='K.' surname='Norrman' fullname='K. Norrman'><organization /></author>
<date year='2004' month='March' />
<abstract><t>This document describes the Secure Real-time Transport Protocol (SRTP), a profile of the Real-time Transport Protocol (RTP), which can provide confidentiality, message authentication, and replay protection to the RTP traffic and to the control traffic for RTP, the Real-time Transport Control Protocol (RTCP).   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3711'/>
<seriesInfo name='DOI' value='10.17487/RFC3711'/>
</reference>



<reference  anchor="RFC3948" target='https://www.rfc-editor.org/info/rfc3948'>
<front>
<title>UDP Encapsulation of IPsec ESP Packets</title>
<author initials='A.' surname='Huttunen' fullname='A. Huttunen'><organization /></author>
<author initials='B.' surname='Swander' fullname='B. Swander'><organization /></author>
<author initials='V.' surname='Volpe' fullname='V. Volpe'><organization /></author>
<author initials='L.' surname='DiBurro' fullname='L. DiBurro'><organization /></author>
<author initials='M.' surname='Stenberg' fullname='M. Stenberg'><organization /></author>
<date year='2005' month='January' />
<abstract><t>This protocol specification defines methods to encapsulate and decapsulate IP Encapsulating Security Payload (ESP) packets inside UDP packets for traversing Network Address Translators.  ESP encapsulation, as defined in this document, can be used in both IPv4 and IPv6 scenarios.  Whenever negotiated, encapsulation is used with Internet Key Exchange (IKE).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3948'/>
<seriesInfo name='DOI' value='10.17487/RFC3948'/>
</reference>



<reference  anchor="RFC4302" target='https://www.rfc-editor.org/info/rfc4302'>
<front>
<title>IP Authentication Header</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the IP Authentication Header (AH), which is designed to provide authentication services in IPv4 and IPv6.  This document obsoletes RFC 2402 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4302'/>
<seriesInfo name='DOI' value='10.17487/RFC4302'/>
</reference>



<reference  anchor="RFC4303" target='https://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>



<reference  anchor="RFC4555" target='https://www.rfc-editor.org/info/rfc4555'>
<front>
<title>IKEv2 Mobility and Multihoming Protocol (MOBIKE)</title>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2006' month='June' />
<abstract><t>This document describes the MOBIKE protocol, a mobility and multihoming extension to Internet Key Exchange (IKEv2).  MOBIKE allows the IP addresses associated with IKEv2 and tunnel mode IPsec Security Associations to change.  A mobile Virtual Private Network (VPN) client could use MOBIKE to keep the connection with the VPN gateway active while moving from one address to another.  Similarly, a multihomed host could use MOBIKE to move the traffic to a different interface if, for instance, the one currently being used stops working.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4555'/>
<seriesInfo name='DOI' value='10.17487/RFC4555'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC5723" target='https://www.rfc-editor.org/info/rfc5723'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2) Session Resumption</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2010' month='January' />
<abstract><t>The Internet Key Exchange version 2 (IKEv2) protocol has a certain computational and communication overhead with respect to the number of round trips required and the cryptographic operations involved. In remote access situations, the Extensible Authentication Protocol (EAP) is used for authentication, which adds several more round trips and consequently latency.</t><t>To re-establish security associations (SAs) upon a failure recovery condition is time consuming especially when an IPsec peer (such as a VPN gateway) needs to re-establish a large number of SAs with various endpoints.  A high number of concurrent sessions might cause additional problems for an IPsec peer during SA re-establishment.</t><t>In order to avoid the need to re-run the key exchange protocol from scratch, it would be useful to provide an efficient way to resume an IKE/IPsec session.  This document proposes an extension to IKEv2 that allows a client to re-establish an IKE SA with a gateway in a highly efficient manner, utilizing a previously established IKE SA.</t><t>A client can reconnect to a gateway from which it was disconnected. The proposed approach encodes partial IKE state into an opaque ticket, which can be stored on the client or in a centralized store, and is later made available to the IKEv2 responder for re-authentication.  We use the term ticket to refer to the opaque data that is created by the IKEv2 responder.  This document does not specify the format of the ticket but examples are provided.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5723'/>
<seriesInfo name='DOI' value='10.17487/RFC5723'/>
</reference>



<reference  anchor="RFC5763" target='https://www.rfc-editor.org/info/rfc5763'>
<front>
<title>Framework for Establishing a Secure Real-time Transport Protocol (SRTP) Security Context Using Datagram Transport Layer Security (DTLS)</title>
<author initials='J.' surname='Fischl' fullname='J. Fischl'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document specifies how to use the Session Initiation Protocol (SIP) to establish a Secure Real-time Transport Protocol (SRTP) security context using the Datagram Transport Layer Security (DTLS) protocol.  It describes a mechanism of transporting a fingerprint attribute in the Session Description Protocol (SDP) that identifies the key that will be presented during the DTLS handshake.  The key exchange travels along the media path as opposed to the signaling path.  The SIP Identity mechanism can be used to protect the integrity of the fingerprint attribute from modification by intermediate proxies.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5763'/>
<seriesInfo name='DOI' value='10.17487/RFC5763'/>
</reference>



<reference  anchor="RFC5764" target='https://www.rfc-editor.org/info/rfc5764'>
<front>
<title>Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document describes a Datagram Transport Layer Security (DTLS) extension to establish keys for Secure RTP (SRTP) and Secure RTP Control Protocol (SRTCP) flows.  DTLS keying happens on the media path, independent of any out-of-band signalling channel present. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5764'/>
<seriesInfo name='DOI' value='10.17487/RFC5764'/>
</reference>



<reference  anchor="RFC5869" target='https://www.rfc-editor.org/info/rfc5869'>
<front>
<title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
<author initials='H.' surname='Krawczyk' fullname='H. Krawczyk'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications.  The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions.  This document is not an Internet  Standards Track specification; it is published for informational  purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='5869'/>
<seriesInfo name='DOI' value='10.17487/RFC5869'/>
</reference>



<reference  anchor="RFC5925" target='https://www.rfc-editor.org/info/rfc5925'>
<front>
<title>The TCP Authentication Option</title>
<author initials='J.' surname='Touch' fullname='J. Touch'><organization /></author>
<author initials='A.' surname='Mankin' fullname='A. Mankin'><organization /></author>
<author initials='R.' surname='Bonica' fullname='R. Bonica'><organization /></author>
<date year='2010' month='June' />
<abstract><t>This document specifies the TCP Authentication Option (TCP-AO), which obsoletes the TCP MD5 Signature option of RFC 2385 (TCP MD5).  TCP-AO specifies the use of stronger Message Authentication Codes (MACs), protects against replays even for long-lived TCP connections, and provides more details on the association of security with TCP connections than TCP MD5.  TCP-AO is compatible with either a static Master Key Tuple (MKT) configuration or an external, out-of-band MKT management mechanism; in either case, TCP-AO also protects connections when using the same MKT across repeated instances of a connection, using traffic keys derived from the MKT, and coordinates MKT changes between endpoints.  The result is intended to support current infrastructure uses of TCP MD5, such as to protect long-lived connections (as used, e.g., in BGP and LDP), and to support a larger set of MACs with minimal other system and operational changes.  TCP-AO uses a different option identifier than TCP MD5, even though TCP-AO and TCP MD5 are never permitted to be used simultaneously.  TCP-AO supports IPv6, and is fully compatible with the proposed requirements for the replacement of TCP MD5.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5925'/>
<seriesInfo name='DOI' value='10.17487/RFC5925'/>
</reference>



<reference  anchor="RFC6066" target='https://www.rfc-editor.org/info/rfc6066'>
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<date year='2011' month='January' />
<abstract><t>This document provides specifications for existing TLS extensions.  It is a companion document for RFC 5246, &quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;.  The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6066'/>
<seriesInfo name='DOI' value='10.17487/RFC6066'/>
</reference>



<reference  anchor="RFC6347" target='https://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>



<reference  anchor="RFC7250" target='https://www.rfc-editor.org/info/rfc7250'>
<front>
<title>Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='P.' surname='Wouters' fullname='P. Wouters' role='editor'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='J.' surname='Gilmore' fullname='J. Gilmore'><organization /></author>
<author initials='S.' surname='Weiler' fullname='S. Weiler'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='June' />
<abstract><t>This document specifies a new certificate type and two TLS extensions for exchanging raw public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS).  The new certificate type allows raw public keys to be used for authentication.</t></abstract>
</front>
<seriesInfo name='RFC' value='7250'/>
<seriesInfo name='DOI' value='10.17487/RFC7250'/>
</reference>



<reference  anchor="RFC7296" target='https://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>



<reference  anchor="RFC7301" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC7539" target='https://www.rfc-editor.org/info/rfc7539'>
<front>
<title>ChaCha20 and Poly1305 for IETF Protocols</title>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This document defines the ChaCha20 stream cipher as well as the use of the Poly1305 authenticator, both as stand-alone algorithms and as a &quot;combined mode&quot;, or Authenticated Encryption with Associated Data (AEAD) algorithm.</t><t>This document does not introduce any new crypto, but is meant to serve as a stable reference and an implementation guide.  It is a product of the Crypto Forum Research Group (CFRG).</t></abstract>
</front>
<seriesInfo name='RFC' value='7539'/>
<seriesInfo name='DOI' value='10.17487/RFC7539'/>
</reference>



<reference  anchor="RFC8095" target='https://www.rfc-editor.org/info/rfc8095'>
<front>
<title>Services Provided by IETF Transport Protocols and Congestion Control Mechanisms</title>
<author initials='G.' surname='Fairhurst' fullname='G. Fairhurst' role='editor'><organization /></author>
<author initials='B.' surname='Trammell' fullname='B. Trammell' role='editor'><organization /></author>
<author initials='M.' surname='Kuehlewind' fullname='M. Kuehlewind' role='editor'><organization /></author>
<date year='2017' month='March' />
<abstract><t>This document describes, surveys, and classifies the protocol mechanisms provided by existing IETF protocols, as background for determining a common set of transport services.  It examines the Transmission Control Protocol (TCP), Multipath TCP, the Stream Control Transmission Protocol (SCTP), the User Datagram Protocol (UDP), UDP-Lite, the Datagram Congestion Control Protocol (DCCP), the Internet Control Message Protocol (ICMP), the Real-Time Transport Protocol (RTP), File Delivery over Unidirectional Transport / Asynchronous Layered Coding (FLUTE/ALC) for Reliable Multicast, NACK- Oriented Reliable Multicast (NORM), Transport Layer Security (TLS), Datagram TLS (DTLS), and the Hypertext Transport Protocol (HTTP), when HTTP is used as a pseudotransport.  This survey provides background for the definition of transport services within the TAPS working group.</t></abstract>
</front>
<seriesInfo name='RFC' value='8095'/>
<seriesInfo name='DOI' value='10.17487/RFC8095'/>
</reference>



<reference  anchor="RFC8229" target='https://www.rfc-editor.org/info/rfc8229'>
<front>
<title>TCP Encapsulation of IKE and IPsec Packets</title>
<author initials='T.' surname='Pauly' fullname='T. Pauly'><organization /></author>
<author initials='S.' surname='Touati' fullname='S. Touati'><organization /></author>
<author initials='R.' surname='Mantha' fullname='R. Mantha'><organization /></author>
<date year='2017' month='August' />
<abstract><t>This document describes a method to transport Internet Key Exchange Protocol (IKE) and IPsec packets over a TCP connection for traversing network middleboxes that may block IKE negotiation over UDP.  This method, referred to as &quot;TCP encapsulation&quot;, involves sending both IKE packets for Security Association establishment and Encapsulating Security Payload (ESP) packets over a TCP connection.  This method is intended to be used as a fallback option when IKE cannot be negotiated over UDP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8229'/>
<seriesInfo name='DOI' value='10.17487/RFC8229'/>
</reference>



<reference anchor="I-D.ietf-tls-dtls13">
<front>
<title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='N' surname='Modadugu' fullname='Nagendra Modadugu'>
    <organization />
</author>

<date month='March' day='4' year='2018' />

<abstract><t>This document specifies Version 1.3 of the Datagram Transport Layer Security (DTLS) protocol.  DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.  The DTLS 1.3 protocol is intentionally based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-dtls13-26' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-dtls13-26.txt' />
</reference>



<reference anchor="I-D.ietf-tls-dtls-connection-id">
<front>
<title>The Datagram Transport Layer Security (DTLS) Connection Identifier</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='T' surname='Fossati' fullname='Thomas Fossati'>
    <organization />
</author>

<author initials='T' surname='Gondrom' fullname='Tobias Gondrom'>
    <organization />
</author>

<date month='December' day='27' year='2017' />

<abstract><t>This document specifies the "Connection ID" concept for the Datagram Transport Layer Security (DTLS) protocol, version 1.2 and version 1.3.  A Connection ID is an identifier carried in the record layer header that gives the recipient additional information for selecting the appropriate security association.  In "classical" DTLS, selecting a security association of an incoming DTLS record is accomplished with the help of the 5-tuple.  If the source IP address and/or source port changes during the lifetime of an ongoing DTLS session then the receiver will be unable to locate the correct security context.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-dtls-connection-id-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-dtls-connection-id-00.txt' />
</reference>



<reference anchor="I-D.ietf-rtcweb-security-arch">
<front>
<title>WebRTC Security Architecture</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<date month='March' day='12' year='2018' />

<abstract><t>This document defines the security architecture for WebRTC, a protocol suite intended for use with real-time applications that can be deployed in browsers - "real time communication on the Web".</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-rtcweb-security-arch-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-rtcweb-security-arch-14.txt' />
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpcrypt">
<front>
<title>Cryptographic protection of TCP Streams (tcpcrypt)</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='Q' surname='Slack' fullname='Quinn Slack'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='November' day='29' year='2017' />

<abstract><t>This document specifies tcpcrypt, a TCP encryption protocol designed for use in conjunction with the TCP Encryption Negotiation Option (TCP-ENO).  Tcpcrypt coexists with middleboxes by tolerating resegmentation, NATs, and other manipulations of the TCP header.  The protocol is self-contained and specifically tailored to TCP implementations, which often reside in kernels or other environments in which large external software dependencies can be undesirable. Because the size of TCP options is limited, the protocol requires one additional one-way message latency to perform key exchange before application data may be transmitted.  However, this cost can be avoided between two hosts that have recently established a previous tcpcrypt connection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpcrypt-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpcrypt-11.txt' />
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpeno">
<front>
<title>TCP-ENO: Encryption Negotiation Option</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='November' day='30' year='2017' />

<abstract><t>Despite growing adoption of TLS, a significant fraction of TCP traffic on the Internet remains unencrypted.  The persistence of unencrypted traffic can be attributed to at least two factors. First, some legacy protocols lack a signaling mechanism (such as a "STARTTLS" command) by which to convey support for encryption, making incremental deployment impossible.  Second, legacy applications themselves cannot always be upgraded, requiring a way to implement encryption transparently entirely within the transport layer.  The TCP Encryption Negotiation Option (TCP-ENO) addresses both of these problems through a new TCP option-kind providing out-of-band, fully backward-compatible negotiation of encryption.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpeno-18' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpeno-18.txt' />
</reference>



<reference anchor="I-D.ietf-quic-transport">
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

<author initials='J' surname='Iyengar' fullname='Jana Iyengar'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='March' day='4' year='2018' />

<abstract><t>This document defines the core of the QUIC transport protocol.  This document describes connection establishment, packet format, multiplexing and reliability.  Accompanying documents describe the cryptographic handshake and loss detection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-10' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-10.txt' />
</reference>



<reference anchor="I-D.ietf-quic-tls">
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='March' day='4' year='2018' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic [1].  Working Group information can be found at https://github.com/quicwg [2]; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/-tls [3].</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-10' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-10.txt' />
</reference>



<reference anchor="I-D.ietf-tls-tls13">
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<date month='March' day='20' year='2018' />

<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.  This document updates RFCs 4492, 5705, and 6066 and it obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-tls13-28' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-tls13-28.txt' />
</reference>


<reference anchor="BLAKE2" >
  <front>
    <title>BLAKE2 -- simpler, smaller, fast as MD5</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="Noise" >
  <front>
    <title>The Noise Protocol Framework</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="WireGuard" >
  <front>
    <title>WireGuard -- Next Generation Kernel Network Tunnel</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="SIGMA" >
  <front>
    <title>SIGMA -- The ‘SIGn-and-MAc’ Approach to Authenticated Diffie-Hellman and Its Use in the IKE-Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CurveCP" >
  <front>
    <title>CurveCP -- Usable security for the Internet</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="Curve25519" >
  <front>
    <title>Curve25519 - new Diffie-Hellman speed records</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="MinimalT" >
  <front>
    <title>MinimaLT -- Minimal-latency Networking Through Better Security</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAC28tFoAA91963IbR5bm/3qKXPmHwWgAoihRsth7aZqkLLYsiS1S9vRs
bGwUUAmizEIVprJAClY4Yh5j9132377JPMmea14KRcqano6d3Q63TQB1yTx5
8pzvXHMymWRd2VX2yByby017a7emWZirNq/dumk7c2nnm7bstuaibbpm3lQu
y2ez1t4emc5f5PQiR0/IimZe5yt4ZtHmi25S2m4x6fK1m/hbJnrLZH8/K/LO
HmVz+Pd1026PTFkvmiwr1y2+Y+O6g/39l/sH2Y3d3jVtcWTO6862te0mp/j4
LHNdXhf/Pa+aGl65tS5bl0fmv8Jox8bBu1q7cPDXdoV//LcsyzfdsmmPMmMm
8H8Dr3NH5mpqLvJNtaVvePBXzWq1jb5t2mug0npdWRjBfErfOXi67Y7M+9rK
Txd5e2N+zvmWOczwyJxs1rbtyroZm5O8KhdNW5e5eXm4/+QZX9Vs6g4n/rEu
O1uYyw5I4XAdjle2Lec5XWVXeVkBRdY4oD/l+LLpvFml0ziBadj2Bv6OJnLS
VGWdfE9Tgbfd2tbhusGrfqhyd93cJbO6nC+bpsJfT5rVegNTuIbvSlvPbTQ9
udOYH54cmO/+8pfBOb2BewsarZ/J3K3/BP/nYU1hSOlU3kzNh8bZaB5vtkBf
/x0vx00ODzNXdr6sm6q5Li0s9c7qPDncN9+3TV7cpeuSr2ZtWVzbsXl7bPYP
njz7V6zHTQsD+hP9e3cOsBzHU/Nz0xTxcizb0nXNemnb5Nd/H/w1z+9gQBF/
ZXXTrvIOeOWIrvvw6uTg6XeH4cPh/nf+w9OD50/Ch8Nn4bKnL55Ev7x8Fu55
9nT/IP7wNHw4PAwPODx49jx8eHHwNPrwPPnwLHz47vnL8OHlQXja8/3n4WnP
nz574T+8gAlFH16Gy1483Q9TeHH4NDz6u/2X4dHfHRzIL+eT0ykLv8pNCvjX
k6f3/DCZN3Vt513Z1JOy6F3UdvM7OwsiM2/ny/5z5uuynuN/5u123d37q62b
3m//tCnnQS4P/li5gVFHs/n+x+M3Z7KExog64S/NZGJcuQJeakEEr/KK/ljk
rjO5M29PD+WmTQust+y6tTt6/HhW5Tf2YAoSXv9cFwu5kIW305fpbuP/0Z77
s83rycWyrMr1GjbNZpU719T3X3+Zrza2Mu/srXX3X/WPTXPTmJ/Lat58mrz/
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

-->

</rfc>

