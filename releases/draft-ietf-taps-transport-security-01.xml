<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-ietf-taps-transport-security-01" category="info">

  <front>
    <title abbrev="transport security survey">A Survey of Transport Security Protocols</title>

    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="C." surname="Perkins" fullname="Colin Perkins">
      <organization>University of Glasgow</organization>
      <address>
        <postal>
          <street>School of Computing Science</street>
          <city>Glasgow  G12 8QQ</city>
          <country>United Kingdom</country>
        </postal>
        <email>csp@csperkins.org</email>
      </address>
    </author>
    <author initials="K." surname="Rose" fullname="Kyle Rose">
      <organization>Akamai Technologies, Inc.</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge, MA 02144</city>
          <country>United States of America</country>
        </postal>
        <email>krose@krose.org</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>One Apple Park Way</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cawood@apple.com</email>
      </address>
    </author>

    <date year="2018" month="May" day="11"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document provides a survey of commonly used or notable network security protocols, with a focus 
on how they interact and integrate with applications and transport protocols. Its goal is to supplement 
efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to 
add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer Security (DTLS), 
Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, Internet Key Exchange 
with Encapsulating Security Protocol (IKEv2 + ESP), SRTP (with DTLS), and WireGuard. This survey is not 
limited to protocols developed within the scope or context of the IETF.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document provides a survey of commonly used or notable network security protocols, with a focus 
on how they interact and integrate with applications and transport protocols.  Its goal is to supplement 
efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to 
add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer 
Security (DTLS), Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, 
Internet Key Exchange with Encapsulating Security Protocol (IKEv2 + ESP), SRTP (with DTLS), and 
WireGuard. This survey is not limited to protocols developed within the scope or context of the IETF.</t>

<t>For each protocol, this document provides a brief description, the security features it provides, 
and the dependencies it has on the underlying transport. This is followed by defining the set of 
transport security features shared by these protocols. Finally, we distill the application and 
transport interfaces provided by the transport security protocols.</t>

<t>Authentication-only protocols such as TCP-AO <xref target="RFC5925"/> and IPsec AH <xref target="RFC4302"/> are excluded
from this survey. TCP-AO adds authenticity protections to long-lived TCP connections, e.g., replay 
protection  with per-packet Message Authentication Codes. (This protocol obsoletes TCP MD5 “signature” 
options specified in <xref target="RFC2385"/>.) One prime use case of TCP-AO is for protecting BGP connections. 
Similarly, AH adds per-datagram authenticity and adds similar replay protection. Despite these
improvements, neither protocol sees general use and both lack critical properties important for emergent
transport security protocols: confidentiality, privacy protections, and agility. Thus, we omit
these and related protocols from our survey.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The following terms are used throughout this document to describe the roles and interactions of transport security protocols:</t>

<t><list style="symbols">
  <t>Transport Feature: a specific end-to-end feature that the transport layer provides to an application. 
Examples include confidentiality, reliable delivery, ordered delivery, message-versus-stream orientation, etc.</t>
  <t>Transport Service: a set of Transport Features, without an association to any given framing protocol, 
which provides functionality to an application.</t>
  <t>Transport Protocol: an implementation that provides one or more different transport services using a 
specific framing and header format on the wire. A Transport Protocol services an application.</t>
  <t>Application: an entity that uses a transport protocol for end-to-end delivery of data across the network.
This may also be an upper layer protocol or tunnel encapsulation.</t>
  <t>Security Feature: a specific feature that a network security layer provides to applications. Examples 
include authentication, encryption, key generation, session resumption, and privacy. A feature may be 
considered to be Mandatory or Optional to an application’s implementation.</t>
  <t>Security Protocol: a defined network protocol that implements one or more security features. Security 
protocols may be used alongside transport protocols, and in combination with other security protocols when
appropriate.</t>
  <t>Handshake Protocol: a protocol that enables peers to validate each other and to securely establish shared cryptographic context.</t>
  <t>Record Protocol: a security protocol that allows data to be divided into manageable blocks and protected using a shared cryptographic context.</t>
  <t>Session: an ephemeral security association between applications.</t>
  <t>Cryptographic context: a set of cryptographic parameters, including but not necessarily limited to keys for encryption, authentication, and session resumption, enabling authorized parties to a session to communicate securely.</t>
  <t>Connection: the shared state of two or more endpoints that persists across messages that are transmitted 
between these endpoints. A connection is a transient participant of a session, and a session generally lasts 
between connection instances.</t>
  <t>Connection Mobility: a property of a connection that allows it to be multihomed or resilient across network 
interface or address changes.</t>
  <t>Peer: an endpoint application party to a session.</t>
  <t>Client: the peer responsible for initiating a session.</t>
  <t>Server: the peer responsible for responding to a session initiation.</t>
</list></t>

</section>
<section anchor="transport-security-protocol-descriptions" title="Transport Security Protocol Descriptions">

<t>This section contains descriptions of security protocols that currently used to protect data being sent over a network.</t>

<t>For each protocol, we describe the features it provides and its dependencies on other protocols.</t>

<section anchor="tls" title="TLS">

<t>TLS (Transport Layer Security) <xref target="RFC5246"/> is a common protocol used to establish a secure session between two endpoints. Communication
over this session “prevents eavesdropping, tampering, and message forgery.” TLS consists
of a tightly coupled handshake and record protocol. The handshake protocol is used to authenticate peers,
negotiate protocol options, such as cryptographic algorithms, and derive session-specific
keying material. The record protocol is used to marshal (possibly encrypted) data from one
peer to the other. This data may contain handshake messages or raw application data.</t>

<section anchor="protocol-description" title="Protocol Description">

<t>TLS is the composition of a handshake and record protocol <xref target="I-D.ietf-tls-tls13"/>.
The record protocol is designed to marshal an arbitrary, in-order stream of bytes from one endpoint to the other.
It handles segmenting, compressing (when enabled), and encrypting data into discrete records. When configured
to use an AEAD algorithm, it also handles nonce generation and encoding for each record. The record protocol is
hidden from the client behind a byte stream-oriented API.</t>

<t>The handshake protocol serves several purposes, including: peer authentication, protocol option (key exchange
algorithm and ciphersuite) negotiation, and key derivation. Peer authentication may be mutual; however, commonly,
only the server is authenticated. X.509 certificates are commonly used in this authentication step, though
other mechanisms, such as raw public keys <xref target="RFC7250"/>, exist. The client is not authenticated unless explicitly
requested by the server with a CertificateRequest handshake message. Assuming strong cryptography, an infrastructure for trust establishment, correctly-functioning endpoints, and communication patterns free from side channels, server authentication is sufficient to establish a channel resistant to eavesdroppers.</t>

<t>The handshake protocol is also extensible. It allows for a variety of extensions to be included by either the client
or server. These extensions are used to specify client preferences, e.g., the application-layer protocol to be driven
with the TLS connection <xref target="RFC7301"/>, or signals to the server to aid operation, e.g., Server Name Indication (SNI) <xref target="RFC6066"/>. Various extensions also exist
to tune the parameters of the record protocol, e.g., the maximum fragment length <xref target="RFC6066"/>.</t>

<t>Alerts are used to convey errors and other atypical events to the endpoints. There are two classes of alerts: closure
and error alerts. A closure alert is used to signal to the other peer that the sender wishes to terminate the connection.
The sender typically follows a close alert with a TCP FIN segment to close the connection. Error alerts are used to
indicate problems with the handshake or individual records. Most errors are fatal and are followed by connection
termination. However, warning alerts may be handled at the discretion of the implementation.</t>

<t>Once a session is disconnected all session keying material must be destroyed, with the exception of secrets previously established expressly for purposes of session resumption.
TLS supports stateful and stateless resumption. (Here, “state” refers to bookkeeping on a per-session basis
by the server. It is assumed that the client must always store some state information in order to resume a session.)</t>

</section>
<section anchor="protocol-features" title="Protocol Features">

<t><list style="symbols">
  <t>Key exchange and ciphersuite algorithm negotiation.</t>
  <t>Stateful and stateless session resumption.</t>
  <t>Certificate- and raw public key-based authentication.</t>
  <t>Mutual client and server authentication.</t>
  <t>Byte stream confidentiality and integrity.</t>
  <t>Extensibility via well-defined extensions.</t>
  <t>0-RTT data support (starting with TLS 1.3).</t>
  <t>Application-layer protocol negotiation.</t>
  <t>Transparent data segmentation.</t>
</list></t>

<!-- caw: possibles to add -->
<!-- - identity hiding -->

</section>
<section anchor="protocol-dependencies" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP for in-order, reliable transport.</t>
  <t>(Optionally) A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="dtls" title="DTLS">

<t>DTLS (Datagram Transport Layer Security) <xref target="RFC6347"/> is based on TLS, but differs in that
it is designed to run over UDP instead of TCP. Since UDP does not guarantee datagram
ordering or reliability, DTLS modifies the protocol to make sure it can still provide
the same security guarantees as TLS. DTLS was designed to be as close to TLS as possible,
so this document will assume that all properties from TLS are carried over except where specified.</t>

<section anchor="protocol-description-1" title="Protocol Description">

<t>DTLS is modified from TLS to account for packet loss, reordering, and duplication that may occur when operating over UDP. To enable out-of-order delivery of application data, the DTLS record protocol itself has no inter-record dependencies. However, as the handshake requires reliability, each handshake message is assigned an explicit sequence number to enable retransmissions of lost packets and in-order processing by the receiver. Handshake message loss is remedied by sender retransmission after a configurable period in which the expected response has not yet been received.</t>

<t>As the DTLS handshake protocol runs atop the record protocol, to account for long handshake messages that cannot fit within a single record, DTLS supports fragmentation and subsequent reconstruction of handshake messages across records. The receiver must reassemble records before processing.</t>

<t>DTLS relies on unique UDP 4-tuples to allow peers with multiple DTLS connections between them to demultiplex connections, constraining protocol design slightly more than UDP: application-layer demultiplexing over the same 4-tuple is not possible without trial decryption as all application-layer data is encrypted to a connection-specific cryptographic context. Starting with DTLS 1.3 <xref target="I-D.ietf-tls-dtls13"/>, a connection identifier extension to permit multiplexing of independent connections over the same 4-tuple is available <xref target="I-D.ietf-tls-dtls-connection-id"/>.</t>

<t>Since datagrams may be replayed, DTLS provides optional anti-replay detection based on a window of acceptable sequence numbers <xref target="RFC6347"/>.</t>

</section>
<section anchor="protocol-features-1" title="Protocol Features">

<t><list style="symbols">
  <t>Anti-replay protection between datagrams.</t>
  <t>Basic reliability for handshake messages.</t>
  <t>See also the features from TLS.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-1" title="Protocol Dependencies">

<t><list style="symbols">
  <t>Since DTLS runs over an unreliable, unordered datagram transport, it does not require any reliability features.</t>
  <t>The DTLS record protocol explicitly encodes record lengths, so although it runs over a datagram transport, it does not rely on the transport protocol’s framing beyond requiring transport-level reconstruction of datagrams fragmented over packets.</t>
  <t>UDP 4-tuple uniqueness, or the connection identifier extension, for demultiplexing.</t>
  <t>Path MTU discovery.</t>
</list></t>

</section>
</section>
<section anchor="ietf-quic-with-tls" title="(IETF) QUIC with TLS">

<t>QUIC (Quick UDP Internet Connections) is a new standards-track transport protocol that runs over 
UDP, loosely based on Google’s original proprietary gQUIC protocol. (See <xref target="section-gquic"/> for more details.)
The QUIC transport layer itself provides support for data confidentiality and integrity.
This requires keys to be derived with a separate handshake protocol.
A mapping for QUIC over TLS 1.3 <xref target="I-D.ietf-quic-tls"/> has been specified to provide this handshake.</t>

<section anchor="protocol-description-2" title="Protocol Description">

<t>As QUIC relies on TLS to secure its transport functions, it creates specific integration points
between its security and transport functions:</t>

<t><list style="symbols">
  <t>Starting the handshake to generate keys and provide authentication (and providing the transport for the handshake).</t>
  <t>Client address validation.</t>
  <t>Key ready events from TLS to notify the QUIC transport.</t>
  <t>Exporting secrets from TLS to the QUIC transport.</t>
</list></t>

<t>The QUIC transport layer support multiple streams over a single connection. The first
stream is reserved specifically for a TLS connection. The TLS handshake, along with
further records, are sent over this stream. This TLS connection follows the TLS standards
and inherits the security properties of TLS. The handshake generates keys, which are
then exported to the rest of the QUIC connection, and are used to protect the rest of the streams.</t>

<t>Initial QUIC messages (packets) are encrypted using “fixed” keys derived from the QUIC version and 
public packet information (Connection ID). Packets are later encrypted using keys derived
from the TLS traffic secret upon handshake completion. The TLS 1.3
handshake for QUIC is used in either a single-RTT mode or a fast-open zero-RTT mode. When
zero-RTT handshakes are possible, the encryption first transitions to use the zero-RTT keys
before using single-RTT handshake keys after the next TLS flight.</t>

</section>
<section anchor="protocol-features-2" title="Protocol Features">

<t><list style="symbols">
  <t>Handshake properties of TLS.</t>
  <t>Multiple encrypted streams over a single connection without head-of-line blocking.</t>
  <t>Packet payload encryption and complete packet authentication (with the exception of the 
Public Reset packet, which is not authenticated).</t>
</list></t>

</section>
<section anchor="protocol-dependencies-2" title="Protocol Dependencies">

<t><list style="symbols">
  <t>QUIC transport relies on UDP.</t>
  <t>QUIC transport relies on TLS 1.3 for authentication and initial key derivation.</t>
  <t>TLS within QUIC relies on a reliable stream abstraction for its handshake.</t>
</list></t>

</section>
<section anchor="section-gquic" title="Differences from Google QUIC">

<t>Google QUIC (gQUIC) is a UDP-based multiplexed streaming protocol designed and deployed by Google 
following experience from deploying SPDY, the proprietary predecessor to HTTP/2.
gQUIC was originally known as “QUIC”: this document uses gQUIC to unambiguously distinguish 
it from the standards-track IETF QUIC. The proprietary technical forebear of IETF QUIC, gQUIC 
was originally designed with tightly-integrated security and application data transport protocols.</t>

</section>
<section anchor="protocol-description-3" title="Protocol Description">

<t>((TODO: write me))</t>

</section>
<section anchor="protocol-dependencies-3" title="Protocol Dependencies">

<t>((TODO: write me))</t>

</section>
</section>
<section anchor="ikev2-with-esp" title="IKEv2 with ESP">

<t>IKEv2 <xref target="RFC7296"/> and ESP <xref target="RFC4303"/> together form the modern IPsec protocol suite that encrypts and authenticates IP packets, either as for creating tunnels (tunnel-mode) or for direct transport connections (transport-mode). This suite of protocols separates out the key generation protocol (IKEv2) from the transport encryption protocol (ESP). Each protocol can be used independently, but this document considers them together, since that is the most common pattern.</t>

<section anchor="protocol-descriptions" title="Protocol descriptions">

<section anchor="ikev2" title="IKEv2">

<t>IKEv2 is a control protocol that runs on UDP port 500. Its primary goal is to generate keys for Security Associations (SAs). It first uses a Diffie-Hellman key exchange to generate keys for the “IKE SA”, which is a set of keys used to encrypt further IKEv2 messages. It then goes through a phase of authentication in which both peers present blobs signed by a shared secret or private key, after which another set of keys is derived, referred to as the “Child SA”. These Child SA keys are used by ESP.</t>

<t>IKEv2 negotiates which protocols are acceptable to each peer for both the IKE and Child SAs using “Proposals”. Each proposal may contain an encryption algorithm, an authentication algorithm, a Diffie-Hellman group, and (for IKE SAs only) a pseudorandom function algorithm. Each peer may support multiple proposals, and the most preferred mutually supported proposal is chosen during the handshake.</t>

<t>The authentication phase of IKEv2 may use Shared Secrets, Certificates, Digital Signatures, or an EAP (Extensible Authentication Protocol) method. At a minimum, IKEv2 takes two round trips to set up both an IKE SA and a Child SA. If EAP is used, this exchange may be expanded.</t>

<t>Any SA used by IKEv2 can be rekeyed upon expiration, which is usually based either on time or number of bytes encrypted.</t>

<t>There is an extension to IKEv2 that allows session resumption <xref target="RFC5723"/>.</t>

<t>MOBIKE is a Mobility and Multihoming extension to IKEv2 that allows a set of Security Associations to migrate over different addresses and interfaces <xref target="RFC4555"/>.</t>

<t>When UDP is not available or well-supported on a network, IKEv2 may be encapsulated in TCP <xref target="RFC8229"/>.</t>

</section>
<section anchor="esp" title="ESP">

<t>ESP is a protocol that encrypts and authenticates IPv4 and IPv6 packets. The keys used for both encryption and authentication can be derived from an IKEv2 exchange. ESP Security Associations come as pairs, one for each direction between two peers. Each SA is identified by a Security Parameter Index (SPI), which is marked on each encrypted ESP packet.</t>

<t>ESP packets include the SPI, a sequence number, an optional Initialization Vector (IV), payload data, padding, a length and next header field, and an Integrity Check Value.</t>

<t>From <xref target="RFC4303"/>, “ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.”</t>

<t>Since ESP operates on IP packets, it is not directly tied to the transport protocols it encrypts. This means it requires little or no change from transports in order to provide security.</t>

<t>ESP packets may be sent directly over IP, but where network conditions warrant (e.g., when a NAT is present or when a firewall blocks such packets) they may be encapsulated in UDP <xref target="RFC3948"/> or TCP <xref target="RFC8229"/>.</t>

</section>
</section>
<section anchor="protocol-features-3" title="Protocol features">

<section anchor="ikev2-1" title="IKEv2">

<t><list style="symbols">
  <t>Encryption and authentication of handshake packets.</t>
  <t>Cryptographic algorithm negotiation.</t>
  <t>Session resumption.</t>
  <t>Mobility across addresses and interfaces.</t>
  <t>Peer authentication extensibility based on shared secret, certificates, digital signatures, or EAP methods.</t>
</list></t>

</section>
<section anchor="esp-1" title="ESP">

<t><list style="symbols">
  <t>Data confidentiality and authentication.</t>
  <t>Connectionless integrity.</t>
  <t>Anti-replay protection.</t>
  <t>Limited flow confidentiality.</t>
</list></t>

</section>
</section>
<section anchor="protocol-dependencies-4" title="Protocol dependencies">

<section anchor="ikev2-2" title="IKEv2">

<t><list style="symbols">
  <t>Availability of UDP to negotiate, or implementation support for TCP-encapsulation.</t>
  <t>Some EAP authentication types require accessing a hardware device, such as a SIM card; or interacting with a user, such as password prompting.</t>
</list></t>

</section>
<section anchor="esp-2" title="ESP">

<t><list style="symbols">
  <t>Since ESP is below transport protocols, it does not have any dependencies on the transports themselves, other than on UDP or TCP where encapsulation is employed.</t>
</list></t>

</section>
</section>
</section>
<section anchor="srtp-with-dtls" title="SRTP (with DTLS)">

<t>SRTP – Secure RTP – is a profile for RTP that provides confidentiality, message 
authentication, and replay protection for data and control packets <xref target="RFC3711"/>.
SRTP packets are encrypted using a session key, which is derived from a separate
master key. Master keys are derived and managed externally, e.g., via DTLS, as specified
in RFC 5763 <xref target="RFC5763"/>, under the control of a signaling protocol such as SIP <xref target="RFC3261"/>
or WebRTC <xref target="I-D.ietf-rtcweb-security-arch"/>.</t>

<section anchor="protocol-descriptions-1" title="Protocol descriptions">

<t>SRTP adds confidentiality and optional integrity protection to RTP data packets,
and adds confidentially and mandatory integrity protection to RTP control (RTCP) packets.
For RTP data packets, this is done by encrypting the payload section of the packet
and optionally appending an authentication tag (MAC) as a packet trailer, with the RTP
header authenticated but not encrypted. The RTP header itself is left unencrypted
to enable RTP header compression <xref target="RFC2508"/><xref target="RFC3545"/>. For RTCP packets, the first packet
in the compound RTCP packet is partially encrypted, leaving the first eight octets of
the header as cleartext to allow identification of the packet as RTCP, while the remainder 
of the compound packet is fully encrypted. The entire RTCP packet is then authenticated
by appending a MAC as packet trailer.</t>

<t>Packets are encrypted using session keys, which
are ultimately derived from a master key and some additional master salt and session salt.
SRTP packets carry a 2-byte sequence number to partially identify the unique packet
index. SRTP peers maintain a separate rollover counter (ROC) for RTP data packets that is 
incremented whenever the sequence number wraps. The sequence number and ROC together 
determine the packet index. RTCP packets have a similar, yet differently named, field
called the RTCP index which serves the same purpose.</t>

<t>Numerous encryption modes are supported. For popular modes of operation, e.g., AES-CTR, 
the (unique) initialization vector (IV) used for each encryption mode is a function of 
the RTP SSRC (synchronization source), packet index, and session “salting key”.</t>

<t>SRTP offers replay detection by keeping a replay list of already seen and processed packet indices. 
If a packet arrives with an index that matches one in the replay list, it is silently discarded.</t>

<t>DTLS <xref target="RFC5764"/> is commonly used as a way to perform mutual authentication and key 
agreement for SRTP <xref target="RFC5763"/>. (Here, certificates marshal public keys between
endpoints. Thus, self-signed certificates may be used if peers do not mutually trust one another, 
as is common on the Internet.) When DTLS is used, certificate fingerprints are transmitted
out-of-band using SIP. Peers typically verify that DTLS-offered certificates match
that which are offered over SIP. This prevents active attacks on RTP, but not on the signaling (SIP or
WebRTC) channel.</t>

</section>
<section anchor="protocol-features-4" title="Protocol features">

<t><list style="symbols">
  <t>Optional replay protection with tunable replay windows.</t>
  <t>Out-of-order packet receipt.</t>
  <t>(RFC5763) Mandatory mutually authenticated key exchange.</t>
  <t>Partial encryption, protecting media payloads and control packets but not data packet headers.</t>
  <t>Optional authentication of data packets; mandatory authentication of control packets.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-5" title="Protocol dependencies">

<t><list style="symbols">
  <t>External key derivation and management mechanism or protocol, e.g., DTLS <xref target="RFC5763"/>.</t>
  <t>External signaling protocol to manage RTP parameters and locate and identify peers, e.g., 
SIP <xref target="RFC3261"/> or WebRTC <xref target="I-D.ietf-rtcweb-security-arch"/>.</t>
</list></t>

</section>
</section>
<section anchor="differences-from-zrtp" title="Differences from ZRTP">

<t>((TODO: write me))</t>

</section>
<section anchor="tcpcrypt" title="tcpcrypt">

<t>Tcpcrypt is a lightweight extension to the TCP protocol to enable opportunistic encryption with hooks available to the application layer for implementation of endpoint authentication.</t>

<section anchor="protocol-description-4" title="Protocol Description">

<t>Tcpcrypt extends TCP to enable opportunistic encryption between the two ends of a TCP connection <xref target="I-D.ietf-tcpinc-tcpcrypt"/>.
It is a family of TCP encryption protocols (TEP), distinguished by key exchange algorithm.
The use of a TEP is negotiated with a TCP option during the initial TCP handshake via the mechanism described by TCP Encryption Negotiation Option (ENO) <xref target="I-D.ietf-tcpinc-tcpeno"/>.
In the case of initial session establishment, once a tcpcrypt TEP has been negotiated the key exchange occurs within the data segments of the first few packets exchanged after the handshake completes. The initiator of a connection sends a list of supported AEAD algorithms, a random nonce, and an ephemeral public key share.
The responder typically chooses a mutually-supported AEAD algorithm and replies with this choice, its own nonce, and ephemeral key share.
An initial shared secret is derived from the ENO handshake, the tcpcrypt handshake, and the initial keying material resulting from the key exchange. The traffic encryption keys on the initial connection are derived from the shared secret.
Connections can be re-keyed before the natural AEAD limit for a single set of traffic encryption keys is reached.</t>

<t>Each tcpcrypt session is associated with a ladder of resumption IDs, each derived from the respective entry in a ladder of shared secrets.
These resumption IDs can be used to negotiate a stateful resumption of the session in a subsequent connection, resulting in use of a new shared secret and traffic encryption keys without requiring a new key exchange.
Willingness to resume a session is signaled via the ENO option during the TCP handshake.
Given the length constraints imposed by TCP options, unlike stateless resumption mechanisms (such as that provided by session tickets in TLS) resumption in tcpcrypt requires the maintenance of state on the server, and so successful resumption across a pool of servers implies shared state.</t>

<t>Owing to middlebox ossification issues, tcpcrypt only protects the payload portion of a TCP packet.
It does not encrypt any header information, such as the TCP sequence number.</t>

<t>Tcpcrypt exposes a universally-unique connection-specific session ID to the application, suitable for application-level endpoint authentication either in-band or out-of-band.</t>

</section>
<section anchor="protocol-features-5" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure TCP payload encryption and integrity protection.</t>
  <t>Session caching and address-agnostic resumption.</t>
  <t>Connection re-keying.</t>
  <t>Application-level authentication primitive.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-6" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP</t>
  <t>TCP Encryption Negotiation Option (ENO)</t>
</list></t>

</section>
</section>
<section anchor="wireguard" title="WireGuard">

<t>WireGuard is a layer 3 protocol designed to complement or replace IPsec <xref target="WireGuard"/>.
Unlike most transport security protocols, which rely on PKI for peer authentication, 
WireGuard authenticates peers using pre-shared public keys delivered out-of-band, each 
of which is bound to one or more IP addresses. 
Moreover, as a protocol suited for VPNs, WireGuard offers no extensibility, negotiation, 
or cryptographic agility.</t>

<section anchor="protocol-description-5" title="Protocol description">

<t>WireGuard is a simple VPN protocol that binds a pre-shared public key to one or more
IP addresses. Users configure WireGuard by associating peer public keys with IP addresses. 
These mappings are stored in a CryptoKey Routing Table. (See Section 2 of <xref target="WireGuard"/>
for more details and sample configurations.) These keys are used upon WireGuard packet 
transmission and reception. For example, upon receipt of a Handshake Initiation message,
receivers use the static public key in their CryptoKey routing table to perform necessary
cryptographic computations.</t>

<t>WireGuard builds on Noise <xref target="Noise"/> for 1-RTT key exchange with identity hiding. The handshake
hides peer identities as per the SIGMA construction <xref target="SIGMA"/>. As a consequence of using Noise, 
WireGuard comes with a fixed set of cryptographic algorithms:</t>

<t><list style="symbols">
  <t>x25519 <xref target="Curve25519"/> and HKDF <xref target="RFC5869"/> for ECDH and key derivation.</t>
  <t>ChaCha20+Poly1305 <xref target="RFC7539"/> for packet authenticated encryption.</t>
  <t>BLAKE2s <xref target="BLAKE2"/> for hashing.</t>
</list></t>

<t>There is no cryptographic agility. If weaknesses are found in any of
these algorithms, new message types using new algorithms must be introduced.</t>

<t>WireGuard is designed to be entirely stateless, modulo the CryptoKey routing table, which has size
linear with the number of trusted peers. If a WireGuard receiver is under heavy load and cannot process
a packet, e.g., cannot spare CPU cycles for point multiplication, it can reply with a cookie similar
to DTLS and IKEv2. This cookie only proves IP address ownership. Any rate limiting scheme can be applied
to packets coming from non-spoofed addresses.</t>

</section>
<section anchor="protocol-features-6" title="Protocol features">

<t><list style="symbols">
  <t>Optional PSK-based session creation.</t>
  <t>Mutual client and server authentication.</t>
  <t>Stateful, timestamp-based replay prevention.</t>
  <t>Cookie-based DoS mitigation similar to DTLS and IKEv2.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-7" title="Protocol dependencies">

<t><list style="symbols">
  <t>Datagram transport.</t>
  <t>Out-of-band key distribution and management.</t>
</list></t>

</section>
</section>
<section anchor="minimalt" title="MinimalT">

<t>MinimalT is a UDP-based transport security protocol designed to offer confidentiality, mutual authentication, DoS prevention, and connection
mobility <xref target="MinimalT"/>. One major goal of the protocol is to leverage existing protocols to obtain server-side configuration information used to
more quickly bootstrap a connection. MinimalT uses a variant of TCP’s congestion control algorithm.</t>

<section anchor="protocol-description-6" title="Protocol Description">

<t>MinimalT is a secure transport protocol built on top of a widespread directory service. Clients and servers interact with local directory
services to (a) resolve server information and (b) public ephemeral state information, respectively. Clients connect to a local
resolver once at boot time. Through this resolver they recover the IP address(es) and public key(s) of each server to which
they want to connect.</t>

<t>Connections are instances of user-authenticated, mobile sessions between two endpoints. Connections run within tunnels between hosts. A tunnel
is a server-authenticated container that multiplexes multiple connections between the same hosts. All connections in a tunnel share the
same transport state machine and encryption. Each tunnel has a dedicated control connection used to configure and manage the tunnel over time.
Moreover, since tunnels are independent of the network address information, they may be reused as both ends of the tunnel move about the network.
This does however imply that the connection establishment and packet encryption mechanisms are coupled.</t>

<t>Before a client connects to a remote service, it must first establish a tunnel to the host providing or offering the service. Tunnels are established
in 1-RTT using an ephemeral key obtained from the directory service. Tunnel initiators provide their own ephemeral key and, optionally, a
DoS puzzle solution such that the recipient (server) can verify the authenticity of the request and derive a shared secret. Within a tunnel,
new connections to services may be established.</t>

</section>
<section anchor="protocol-features-7" title="Protocol Features">

<t><list style="symbols">
  <t>0-RTT forward secrecy for new connections.</t>
  <t>DoS prevention by client-side puzzles.</t>
  <t>Tunnel-based mobility.</t>
  <t>(Transport Feature) Connection multiplexing between hosts across shared tunnels.</t>
  <t>(Transport Feature) Congestion control state is shared across connections between the same host pairs.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-8" title="Protocol Dependencies">

<t><list style="symbols">
  <t>A DNS-like resolution service to obtain location information (an IP address) and ephemeral keys.</t>
  <t>A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="curvecp" title="CurveCP">

<t>CurveCP <xref target="CurveCP"/> is a UDP-based transport security protocol from Daniel J. Bernstein.
Unlike other transport security protocols, it is based entirely upon highly efficient public
key algorithms. This removes many pitfalls associated with nonce reuse and key synchronization.</t>

<section anchor="protocol-description-7" title="Protocol Description">

<t>CurveCP is a UDP-based transport security protocol. It is built on three principal features: exclusive use of public key authenticated
encryption of packets, server-chosen cookies to prohibit memory and computation DoS at the server, and connection mobility with a
client-chosen ephemeral identifier.</t>

<t>There are two rounds in CurveCP. In the first round, the client sends its first initialization packet to the server, carrying its (possibly fresh)
ephemeral public key C’, with zero-padding encrypted under the server’s long-term public key. The server replies with a cookie and its own ephemeral
key S’ and a cookie that is to be used by the client. Upon receipt, the client then generates its second initialization packet carrying: the
ephemeral key C’, cookie, and an encryption of C’, the server’s domain name, and, optionally, some message data. The server verifies the cookie
and the encrypted payload and, if valid, proceeds to send data in return. At this point, the connection is established and the two
parties can communicate.</t>

<t>The use of only public-key encryption and authentication, or “boxing”, is done to simplify problems that come with symmetric key management
and synchronization. For example, it allows the sender of a message to be in complete control of each message’s nonce. It does not require
either end to share secret keying material.
Furthermore, it allows connections (or sessions) to be associated with unique ephemeral public keys as a mechanism for enabling forward secrecy given the risk of long-term private key compromise.</t>

<t>The client and server do not perform a standard key exchange. Instead, in the initial exchange of packets, each party provides its
own ephemeral key to the other end. The client can choose a new ephemeral key for every new connection. However, the server must rotate
these keys on a slower basis. Otherwise, it would be trivial for an attacker to force the server to create and store ephemeral keys
with a fake client initialization packet.</t>

<t>Unlike TCP, the server employs cookies to enable source validation. After receiving the client’s initial packet, encrypted under the server’s
long-term public key, the server generates and returns a stateless cookie that must be echoed back in the client’s following message.
This cookie is encrypted under the client’s ephemeral public key.
This stateless technique prevents attackers from hijacking client initialization packets to obtain cookie values to flood clients. (A client
would detect the duplicate cookies and reject the flooded packets.) Similarly, replaying the client’s second packet, carrying the cookie,
will be detected by the server.</t>

<t>CurveCP supports a weak form of client authentication. Clients are permitted to send their long-term public keys in the second initialization
packet. A server can verify this public key and, if untrusted, drop the connection and subsequent data.</t>

<t>Unlike some other protocols, CurveCP data packets leave only the ephemeral public key, the connection ID, and the per-message nonce
in the clear. Everything else is encrypted.</t>

</section>
<section anchor="protocol-features-8" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure data encryption and authentication.</t>
  <t>Per-packet public-key encryption.</t>
  <t>1-RTT session bootstrapping.</t>
  <t>Connection mobility based on a client-chosen ephemeral identifier.</t>
  <t>Connection establishment message padding to prevent traffic amplification.</t>
  <t>Sender-chosen explicit nonces, e.g., based on a sequence number.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-9" title="Protocol Dependencies">

<t><list style="symbols">
  <t>An unreliable transport protocol such as UDP.</t>
</list></t>

</section>
</section>
</section>
<section anchor="security-features-and-transport-dependencies" title="Security Features and Transport Dependencies">

<t>There exists a common set of features shared across the transport protocols surveyed in this document.
Mandatory features constitute a baseline of functionality that an application may assume for any TAPS
implementation. Optional features by contrast may vary from implementation to implementation, and so 
an application cannot simply assume they are available. Applications learn of and use optional features by 
querying for their presence and support. Optional features may not be implemented, or may be disabled if 
their presence impacts transport services or if a necessary transport service is unavailable.</t>

<section anchor="mandatory-features" title="Mandatory Features">

<t><list style="symbols">
  <t>Segment encryption and authentication: Transit data must be protected with an authenticated 
encryption algorithm.</t>
  <t>Forward-secure key establishment: Negotiated keying material must come from an authenticated,
forward-secure key exchange protocol.</t>
  <t>Private key interface or injection: Authentication based on public key signatures is commonplace for
many transport security protocols.</t>
  <t>Endpoint authentication: The endpoint (receiver) of a new connection must be authenticated before any
data is sent to said party.</t>
  <t>Pre-shared key support: A security protocol must be able to use a pre-shared key established 
out-of-band or from a prior session to encrypt individual messages, packets, or datagrams.</t>
</list></t>

</section>
<section anchor="optional-features" title="Optional Features">

<t><list style="symbols">
  <t>Mutual authentication: Transport security protocols must allow each endpoint to authenticate the other if 
required by the application.
  <list style="symbols">
      <t>Transport dependency: None.</t>
      <t>Application dependency: Mutual authentication required for application support.</t>
    </list></t>
  <t>Connection mobility: Sessions should not be bound to a network connection (or 5-tuple). This allows cryptographic
key material and other state information to be reused in the event of a connection change. Examples of this include
a NAT rebinding that occurs without a client’s knowledge.
  <list style="symbols">
      <t>Transport dependency: Connections are unreliable or can change due to unpredictable network events, e.g.,
NAT re-bindings.</t>
      <t>Application dependency: None.</t>
    </list></t>
  <t>Source validation: Source validation must be provided to mitigate server-targeted DoS attacks. This can
be done with puzzles or cookies.
  <list style="symbols">
      <t>Transport dependency: Packets may arrive as datagrams instead of streams from unauthenticated sources.</t>
      <t>Application dependency: None.</t>
    </list></t>
  <t>Application-layer feature negotiation: The type of application using a transport security protocol often requires
features configured at the connection establishment layer, e.g., ALPN <xref target="RFC7301"/>. Moreover, application-layer 
features may often be used to offload the session to another server which can better handle the request. (The TLS SNI 
is one example of such a feature.) As such, transport security protocols should provide a generic mechanism to allow 
for such application-specific features and options to be configured or otherwise negotiated.
  <list style="symbols">
      <t>Transport dependency: None.</t>
      <t>Application dependency: Specification of application-layer features or functionality.</t>
    </list></t>
  <t>Configuration extensions: The protocol negotiation should be extensible with addition of new configuration options.
  <list style="symbols">
      <t>Transport dependency: None.</t>
      <t>Application dependency: Specification of application-specific extensions.</t>
    </list></t>
  <t>Session caching and management: Sessions should be cacheable to enable reuse and amortize the cost of performing
session establishment handshakes.
  <list style="symbols">
      <t>Transport dependency: None.</t>
      <t>Application dependency: None.</t>
    </list></t>
</list></t>

</section>
</section>
<section anchor="transport-security-protocol-interfaces" title="Transport Security Protocol Interfaces">

<t>This section describes the interface surface exposed by the security protocols described above. 
Note that not all protocols support each interface. We partition these interfaces into 
pre-connection (configuration), connection, and post-connection interfaces.</t>

<section anchor="pre-connection-interfaces" title="Pre-Connection Interfaces">

<t>Configuration interfaces are used to configure the security protocols before a
handshake begins or the keys are negotiated.</t>

<t><list style="symbols">
  <t>Identity and Private Keys<vspace />
The application can provide its identities (certificates) and private keys, or
mechanisms to access these, to the security protocol to use during handshakes.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP</t>
  <t>Supported Algorithms (Key Exchange, Signatures, and Ciphersuites)<vspace />
The application can choose the algorithms that are supported for key exchange,
signatures, and ciphersuites.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2, SRTP</t>
  <t>Session Cache Management
The application provides the ability to save and retrieve session state (such as tickets,
keying material, and server parameters) that may be used to resume the security session.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT</t>
  <t>Authentication Delegation<vspace />
The application provides access to a separate module that will provide authentication,
using EAP for example.<vspace />
Protocols: IKEv2, SRTP</t>
  <t>Pre-Shared Key Import<vspace />
Either the handshake protocol or the application directly can supply pre-shared keys for the record protocol use for encryption/decryption and authentication. If the application can supply keys directly, this is considered explicit import; if the handshake protocol traditionally provides the keys directly, it is considered direct import; if the keys can only be shared by the handshake, they are considered non-importable.  <list style="symbols">
      <t>Explict import: QUIC, ESP</t>
      <t>Direct import: TLS, DTLS, MinimalT, tcpcrypt, WireGuard</t>
      <t>Non-importable: CurveCP</t>
    </list></t>
</list></t>

</section>
<section anchor="connection-interfaces" title="Connection Interfaces">

<t><list style="symbols">
  <t>Identity Validation<vspace />
During a handshake, the security protocol will conduct identity validation of the peer.
This can call into the application to offload validation.
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP (DTLS))</t>
  <t>Source Address Validation<vspace />
The handshake protocol may delegate validation of the remote peer that has sent
data to the transport protocol or application. This involves sending a cookie
exchange to avoid DoS attacks.<vspace />
Protocols: QUIC + TLS, DTLS, WireGuard</t>
</list></t>

</section>
<section anchor="post-connection-interfaces" title="Post-Connection Interfaces">

<t><list style="symbols">
  <t>Connection Termination
The security protocol may be instructed to tear down its connection and session information.
This is needed by some protocols to prevent application data truncation attacks.
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2</t>
  <t>Key Update<vspace />
The handshake protocol may be instructed to update its keying material, either
by the application directly or by the record protocol sending a key expiration event.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2</t>
  <t>Pre-Shared Key Export
The handshake protocol will generate one or more keys to be used for record encryption/decryption and authentication. These may be explicitly exportable to the application, traditionally limited to direct export to the record protocol, or inherently non-exportable because the keys must be used directly in conjunction with the record protocol.
  <list style="symbols">
      <t>Explict export: TLS (for QUIC), tcpcrypt, IKEv2, DTLS (for SRTP)</t>
      <t>Direct export: TLS, DTLS, MinimalT</t>
      <t>Non-exportable: CurveCP</t>
    </list></t>
  <t>Key Expiration<vspace />
The record protocol can signal that its keys are expiring due to reaching a time-based deadline, or a use-based deadline (number of bytes that have been encrypted with the key). This interaction is often limited to signaling between the record layer and the handshake layer.<vspace />
Protocols: ESP ((Editor’s note: One may consider TLS/DTLS to also have this interface))</t>
  <t>Transport mobility<vspace />
The record protocol can be signaled that it is being migrated to another transport or interface due to 
connection mobility, which may reset address and state validation.<vspace />
Protocols: QUIC, MinimalT, CurveCP, ESP, WireGuard (roaming)</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has no request to IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document summarizes existing transport security protocols and their interfaces. 
It does not propose changes to or recommend usage of reference protocols.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>The authors would like to thank Mirja Kühlewind, Brian Trammell, Yannick Sierra,
Frederic Jacobs, and Bob Bradley for their input and feedback on earlier versions
of this draft.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC2385" target='https://www.rfc-editor.org/info/rfc2385'>
<front>
<title>Protection of BGP Sessions via the TCP MD5 Signature Option</title>
<author initials='A.' surname='Heffernan' fullname='A. Heffernan'><organization /></author>
<date year='1998' month='August' />
<abstract><t>This memo describes a TCP extension to enhance security for BGP. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2385'/>
<seriesInfo name='DOI' value='10.17487/RFC2385'/>
</reference>



<reference  anchor="RFC2508" target='https://www.rfc-editor.org/info/rfc2508'>
<front>
<title>Compressing IP/UDP/RTP Headers for Low-Speed Serial Links</title>
<author initials='S.' surname='Casner' fullname='S. Casner'><organization /></author>
<author initials='V.' surname='Jacobson' fullname='V. Jacobson'><organization /></author>
<date year='1999' month='February' />
<abstract><t>This document describes a method for compressing the headers of IP/UDP/RTP datagrams to reduce overhead on low-speed serial links. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='2508'/>
<seriesInfo name='DOI' value='10.17487/RFC2508'/>
</reference>



<reference  anchor="RFC3261" target='https://www.rfc-editor.org/info/rfc3261'>
<front>
<title>SIP: Session Initiation Protocol</title>
<author initials='J.' surname='Rosenberg' fullname='J. Rosenberg'><organization /></author>
<author initials='H.' surname='Schulzrinne' fullname='H. Schulzrinne'><organization /></author>
<author initials='G.' surname='Camarillo' fullname='G. Camarillo'><organization /></author>
<author initials='A.' surname='Johnston' fullname='A. Johnston'><organization /></author>
<author initials='J.' surname='Peterson' fullname='J. Peterson'><organization /></author>
<author initials='R.' surname='Sparks' fullname='R. Sparks'><organization /></author>
<author initials='M.' surname='Handley' fullname='M. Handley'><organization /></author>
<author initials='E.' surname='Schooler' fullname='E. Schooler'><organization /></author>
<date year='2002' month='June' />
<abstract><t>This document describes Session Initiation Protocol (SIP), an application-layer control (signaling) protocol for creating, modifying, and terminating sessions with one or more participants.  These sessions include Internet telephone calls, multimedia distribution, and multimedia conferences.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3261'/>
<seriesInfo name='DOI' value='10.17487/RFC3261'/>
</reference>



<reference  anchor="RFC3545" target='https://www.rfc-editor.org/info/rfc3545'>
<front>
<title>Enhanced Compressed RTP (CRTP) for Links with High Delay, Packet Loss and Reordering</title>
<author initials='T.' surname='Koren' fullname='T. Koren'><organization /></author>
<author initials='S.' surname='Casner' fullname='S. Casner'><organization /></author>
<author initials='J.' surname='Geevarghese' fullname='J. Geevarghese'><organization /></author>
<author initials='B.' surname='Thompson' fullname='B. Thompson'><organization /></author>
<author initials='P.' surname='Ruddy' fullname='P. Ruddy'><organization /></author>
<date year='2003' month='July' />
<abstract><t>This document describes a header compression scheme for point to point links with packet loss and long delays.  It is based on Compressed Real-time Transport Protocol (CRTP), the IP/UDP/RTP header compression described in RFC 2508.  CRTP does not perform well on such links: packet loss results in context corruption and due to the long delay, many more packets are discarded before the context is repaired.  To correct the behavior of CRTP over such links, a few extensions to the protocol are specified here.  The extensions aim to reduce context corruption by changing the way the compressor updates the context at the decompressor: updates are repeated and include updates to full and differential context parameters.  With these extensions, CRTP performs well over links with packet loss, packet reordering and long delays.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3545'/>
<seriesInfo name='DOI' value='10.17487/RFC3545'/>
</reference>



<reference  anchor="RFC3711" target='https://www.rfc-editor.org/info/rfc3711'>
<front>
<title>The Secure Real-time Transport Protocol (SRTP)</title>
<author initials='M.' surname='Baugher' fullname='M. Baugher'><organization /></author>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='M.' surname='Naslund' fullname='M. Naslund'><organization /></author>
<author initials='E.' surname='Carrara' fullname='E. Carrara'><organization /></author>
<author initials='K.' surname='Norrman' fullname='K. Norrman'><organization /></author>
<date year='2004' month='March' />
<abstract><t>This document describes the Secure Real-time Transport Protocol (SRTP), a profile of the Real-time Transport Protocol (RTP), which can provide confidentiality, message authentication, and replay protection to the RTP traffic and to the control traffic for RTP, the Real-time Transport Control Protocol (RTCP).   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3711'/>
<seriesInfo name='DOI' value='10.17487/RFC3711'/>
</reference>



<reference  anchor="RFC3948" target='https://www.rfc-editor.org/info/rfc3948'>
<front>
<title>UDP Encapsulation of IPsec ESP Packets</title>
<author initials='A.' surname='Huttunen' fullname='A. Huttunen'><organization /></author>
<author initials='B.' surname='Swander' fullname='B. Swander'><organization /></author>
<author initials='V.' surname='Volpe' fullname='V. Volpe'><organization /></author>
<author initials='L.' surname='DiBurro' fullname='L. DiBurro'><organization /></author>
<author initials='M.' surname='Stenberg' fullname='M. Stenberg'><organization /></author>
<date year='2005' month='January' />
<abstract><t>This protocol specification defines methods to encapsulate and decapsulate IP Encapsulating Security Payload (ESP) packets inside UDP packets for traversing Network Address Translators.  ESP encapsulation, as defined in this document, can be used in both IPv4 and IPv6 scenarios.  Whenever negotiated, encapsulation is used with Internet Key Exchange (IKE).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3948'/>
<seriesInfo name='DOI' value='10.17487/RFC3948'/>
</reference>



<reference  anchor="RFC4302" target='https://www.rfc-editor.org/info/rfc4302'>
<front>
<title>IP Authentication Header</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the IP Authentication Header (AH), which is designed to provide authentication services in IPv4 and IPv6.  This document obsoletes RFC 2402 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4302'/>
<seriesInfo name='DOI' value='10.17487/RFC4302'/>
</reference>



<reference  anchor="RFC4303" target='https://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>



<reference  anchor="RFC4555" target='https://www.rfc-editor.org/info/rfc4555'>
<front>
<title>IKEv2 Mobility and Multihoming Protocol (MOBIKE)</title>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2006' month='June' />
<abstract><t>This document describes the MOBIKE protocol, a mobility and multihoming extension to Internet Key Exchange (IKEv2).  MOBIKE allows the IP addresses associated with IKEv2 and tunnel mode IPsec Security Associations to change.  A mobile Virtual Private Network (VPN) client could use MOBIKE to keep the connection with the VPN gateway active while moving from one address to another.  Similarly, a multihomed host could use MOBIKE to move the traffic to a different interface if, for instance, the one currently being used stops working.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4555'/>
<seriesInfo name='DOI' value='10.17487/RFC4555'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC5723" target='https://www.rfc-editor.org/info/rfc5723'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2) Session Resumption</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2010' month='January' />
<abstract><t>The Internet Key Exchange version 2 (IKEv2) protocol has a certain computational and communication overhead with respect to the number of round trips required and the cryptographic operations involved. In remote access situations, the Extensible Authentication Protocol (EAP) is used for authentication, which adds several more round trips and consequently latency.</t><t>To re-establish security associations (SAs) upon a failure recovery condition is time consuming especially when an IPsec peer (such as a VPN gateway) needs to re-establish a large number of SAs with various endpoints.  A high number of concurrent sessions might cause additional problems for an IPsec peer during SA re-establishment.</t><t>In order to avoid the need to re-run the key exchange protocol from scratch, it would be useful to provide an efficient way to resume an IKE/IPsec session.  This document proposes an extension to IKEv2 that allows a client to re-establish an IKE SA with a gateway in a highly efficient manner, utilizing a previously established IKE SA.</t><t>A client can reconnect to a gateway from which it was disconnected. The proposed approach encodes partial IKE state into an opaque ticket, which can be stored on the client or in a centralized store, and is later made available to the IKEv2 responder for re-authentication.  We use the term ticket to refer to the opaque data that is created by the IKEv2 responder.  This document does not specify the format of the ticket but examples are provided.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5723'/>
<seriesInfo name='DOI' value='10.17487/RFC5723'/>
</reference>



<reference  anchor="RFC5763" target='https://www.rfc-editor.org/info/rfc5763'>
<front>
<title>Framework for Establishing a Secure Real-time Transport Protocol (SRTP) Security Context Using Datagram Transport Layer Security (DTLS)</title>
<author initials='J.' surname='Fischl' fullname='J. Fischl'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document specifies how to use the Session Initiation Protocol (SIP) to establish a Secure Real-time Transport Protocol (SRTP) security context using the Datagram Transport Layer Security (DTLS) protocol.  It describes a mechanism of transporting a fingerprint attribute in the Session Description Protocol (SDP) that identifies the key that will be presented during the DTLS handshake.  The key exchange travels along the media path as opposed to the signaling path.  The SIP Identity mechanism can be used to protect the integrity of the fingerprint attribute from modification by intermediate proxies.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5763'/>
<seriesInfo name='DOI' value='10.17487/RFC5763'/>
</reference>



<reference  anchor="RFC5764" target='https://www.rfc-editor.org/info/rfc5764'>
<front>
<title>Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document describes a Datagram Transport Layer Security (DTLS) extension to establish keys for Secure RTP (SRTP) and Secure RTP Control Protocol (SRTCP) flows.  DTLS keying happens on the media path, independent of any out-of-band signalling channel present. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5764'/>
<seriesInfo name='DOI' value='10.17487/RFC5764'/>
</reference>



<reference  anchor="RFC5869" target='https://www.rfc-editor.org/info/rfc5869'>
<front>
<title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
<author initials='H.' surname='Krawczyk' fullname='H. Krawczyk'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications.  The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions.  This document is not an Internet  Standards Track specification; it is published for informational  purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='5869'/>
<seriesInfo name='DOI' value='10.17487/RFC5869'/>
</reference>



<reference  anchor="RFC5925" target='https://www.rfc-editor.org/info/rfc5925'>
<front>
<title>The TCP Authentication Option</title>
<author initials='J.' surname='Touch' fullname='J. Touch'><organization /></author>
<author initials='A.' surname='Mankin' fullname='A. Mankin'><organization /></author>
<author initials='R.' surname='Bonica' fullname='R. Bonica'><organization /></author>
<date year='2010' month='June' />
<abstract><t>This document specifies the TCP Authentication Option (TCP-AO), which obsoletes the TCP MD5 Signature option of RFC 2385 (TCP MD5).  TCP-AO specifies the use of stronger Message Authentication Codes (MACs), protects against replays even for long-lived TCP connections, and provides more details on the association of security with TCP connections than TCP MD5.  TCP-AO is compatible with either a static Master Key Tuple (MKT) configuration or an external, out-of-band MKT management mechanism; in either case, TCP-AO also protects connections when using the same MKT across repeated instances of a connection, using traffic keys derived from the MKT, and coordinates MKT changes between endpoints.  The result is intended to support current infrastructure uses of TCP MD5, such as to protect long-lived connections (as used, e.g., in BGP and LDP), and to support a larger set of MACs with minimal other system and operational changes.  TCP-AO uses a different option identifier than TCP MD5, even though TCP-AO and TCP MD5 are never permitted to be used simultaneously.  TCP-AO supports IPv6, and is fully compatible with the proposed requirements for the replacement of TCP MD5.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5925'/>
<seriesInfo name='DOI' value='10.17487/RFC5925'/>
</reference>



<reference  anchor="RFC6066" target='https://www.rfc-editor.org/info/rfc6066'>
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<date year='2011' month='January' />
<abstract><t>This document provides specifications for existing TLS extensions.  It is a companion document for RFC 5246, &quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;.  The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6066'/>
<seriesInfo name='DOI' value='10.17487/RFC6066'/>
</reference>



<reference  anchor="RFC6347" target='https://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>



<reference  anchor="RFC7250" target='https://www.rfc-editor.org/info/rfc7250'>
<front>
<title>Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='P.' surname='Wouters' fullname='P. Wouters' role='editor'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='J.' surname='Gilmore' fullname='J. Gilmore'><organization /></author>
<author initials='S.' surname='Weiler' fullname='S. Weiler'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='June' />
<abstract><t>This document specifies a new certificate type and two TLS extensions for exchanging raw public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS).  The new certificate type allows raw public keys to be used for authentication.</t></abstract>
</front>
<seriesInfo name='RFC' value='7250'/>
<seriesInfo name='DOI' value='10.17487/RFC7250'/>
</reference>



<reference  anchor="RFC7296" target='https://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>



<reference  anchor="RFC7301" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC7539" target='https://www.rfc-editor.org/info/rfc7539'>
<front>
<title>ChaCha20 and Poly1305 for IETF Protocols</title>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This document defines the ChaCha20 stream cipher as well as the use of the Poly1305 authenticator, both as stand-alone algorithms and as a &quot;combined mode&quot;, or Authenticated Encryption with Associated Data (AEAD) algorithm.</t><t>This document does not introduce any new crypto, but is meant to serve as a stable reference and an implementation guide.  It is a product of the Crypto Forum Research Group (CFRG).</t></abstract>
</front>
<seriesInfo name='RFC' value='7539'/>
<seriesInfo name='DOI' value='10.17487/RFC7539'/>
</reference>



<reference  anchor="RFC8095" target='https://www.rfc-editor.org/info/rfc8095'>
<front>
<title>Services Provided by IETF Transport Protocols and Congestion Control Mechanisms</title>
<author initials='G.' surname='Fairhurst' fullname='G. Fairhurst' role='editor'><organization /></author>
<author initials='B.' surname='Trammell' fullname='B. Trammell' role='editor'><organization /></author>
<author initials='M.' surname='Kuehlewind' fullname='M. Kuehlewind' role='editor'><organization /></author>
<date year='2017' month='March' />
<abstract><t>This document describes, surveys, and classifies the protocol mechanisms provided by existing IETF protocols, as background for determining a common set of transport services.  It examines the Transmission Control Protocol (TCP), Multipath TCP, the Stream Control Transmission Protocol (SCTP), the User Datagram Protocol (UDP), UDP-Lite, the Datagram Congestion Control Protocol (DCCP), the Internet Control Message Protocol (ICMP), the Real-Time Transport Protocol (RTP), File Delivery over Unidirectional Transport / Asynchronous Layered Coding (FLUTE/ALC) for Reliable Multicast, NACK- Oriented Reliable Multicast (NORM), Transport Layer Security (TLS), Datagram TLS (DTLS), and the Hypertext Transport Protocol (HTTP), when HTTP is used as a pseudotransport.  This survey provides background for the definition of transport services within the TAPS working group.</t></abstract>
</front>
<seriesInfo name='RFC' value='8095'/>
<seriesInfo name='DOI' value='10.17487/RFC8095'/>
</reference>



<reference  anchor="RFC8229" target='https://www.rfc-editor.org/info/rfc8229'>
<front>
<title>TCP Encapsulation of IKE and IPsec Packets</title>
<author initials='T.' surname='Pauly' fullname='T. Pauly'><organization /></author>
<author initials='S.' surname='Touati' fullname='S. Touati'><organization /></author>
<author initials='R.' surname='Mantha' fullname='R. Mantha'><organization /></author>
<date year='2017' month='August' />
<abstract><t>This document describes a method to transport Internet Key Exchange Protocol (IKE) and IPsec packets over a TCP connection for traversing network middleboxes that may block IKE negotiation over UDP.  This method, referred to as &quot;TCP encapsulation&quot;, involves sending both IKE packets for Security Association establishment and Encapsulating Security Payload (ESP) packets over a TCP connection.  This method is intended to be used as a fallback option when IKE cannot be negotiated over UDP.</t></abstract>
</front>
<seriesInfo name='RFC' value='8229'/>
<seriesInfo name='DOI' value='10.17487/RFC8229'/>
</reference>



<reference anchor="I-D.ietf-tls-dtls13">
<front>
<title>The Datagram Transport Layer Security (DTLS) Protocol Version 1.3</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='N' surname='Modadugu' fullname='Nagendra Modadugu'>
    <organization />
</author>

<date month='March' day='4' year='2018' />

<abstract><t>This document specifies Version 1.3 of the Datagram Transport Layer Security (DTLS) protocol.  DTLS 1.3 allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.  The DTLS 1.3 protocol is intentionally based on the Transport Layer Security (TLS) 1.3 protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-dtls13-26' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-dtls13-26.txt' />
</reference>



<reference anchor="I-D.ietf-tls-dtls-connection-id">
<front>
<title>The Datagram Transport Layer Security (DTLS) Connection Identifier</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<author initials='H' surname='Tschofenig' fullname='Hannes Tschofenig'>
    <organization />
</author>

<author initials='T' surname='Fossati' fullname='Thomas Fossati'>
    <organization />
</author>

<author initials='T' surname='Gondrom' fullname='Tobias Gondrom'>
    <organization />
</author>

<date month='December' day='27' year='2017' />

<abstract><t>This document specifies the "Connection ID" concept for the Datagram Transport Layer Security (DTLS) protocol, version 1.2 and version 1.3.  A Connection ID is an identifier carried in the record layer header that gives the recipient additional information for selecting the appropriate security association.  In "classical" DTLS, selecting a security association of an incoming DTLS record is accomplished with the help of the 5-tuple.  If the source IP address and/or source port changes during the lifetime of an ongoing DTLS session then the receiver will be unable to locate the correct security context.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-dtls-connection-id-00' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-dtls-connection-id-00.txt' />
</reference>



<reference anchor="I-D.ietf-rtcweb-security-arch">
<front>
<title>WebRTC Security Architecture</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<date month='March' day='12' year='2018' />

<abstract><t>This document defines the security architecture for WebRTC, a protocol suite intended for use with real-time applications that can be deployed in browsers - "real time communication on the Web".</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-rtcweb-security-arch-14' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-rtcweb-security-arch-14.txt' />
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpcrypt">
<front>
<title>Cryptographic protection of TCP Streams (tcpcrypt)</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='Q' surname='Slack' fullname='Quinn Slack'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='November' day='29' year='2017' />

<abstract><t>This document specifies tcpcrypt, a TCP encryption protocol designed for use in conjunction with the TCP Encryption Negotiation Option (TCP-ENO).  Tcpcrypt coexists with middleboxes by tolerating resegmentation, NATs, and other manipulations of the TCP header.  The protocol is self-contained and specifically tailored to TCP implementations, which often reside in kernels or other environments in which large external software dependencies can be undesirable. Because the size of TCP options is limited, the protocol requires one additional one-way message latency to perform key exchange before application data may be transmitted.  However, this cost can be avoided between two hosts that have recently established a previous tcpcrypt connection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpcrypt-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpcrypt-11.txt' />
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpeno">
<front>
<title>TCP-ENO: Encryption Negotiation Option</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='November' day='30' year='2017' />

<abstract><t>Despite growing adoption of TLS, a significant fraction of TCP traffic on the Internet remains unencrypted.  The persistence of unencrypted traffic can be attributed to at least two factors. First, some legacy protocols lack a signaling mechanism (such as a "STARTTLS" command) by which to convey support for encryption, making incremental deployment impossible.  Second, legacy applications themselves cannot always be upgraded, requiring a way to implement encryption transparently entirely within the transport layer.  The TCP Encryption Negotiation Option (TCP-ENO) addresses both of these problems through a new TCP option-kind providing out-of-band, fully backward-compatible negotiation of encryption.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpeno-18' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpeno-18.txt' />
</reference>



<reference anchor="I-D.ietf-quic-transport">
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

<author initials='J' surname='Iyengar' fullname='Jana Iyengar'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='April' day='17' year='2018' />

<abstract><t>This document defines the core of the QUIC transport protocol.  This document describes connection establishment, packet format, multiplexing and reliability.  Accompanying documents describe the cryptographic handshake and loss detection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-11.txt' />
</reference>



<reference anchor="I-D.ietf-quic-tls">
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='April' day='17' year='2018' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic [1].  Working Group information can be found at https://github.com/quicwg [2]; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/-tls [3].</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-11.txt' />
</reference>



<reference anchor="I-D.ietf-tls-tls13">
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<date month='March' day='20' year='2018' />

<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.  This document updates RFCs 4492, 5705, and 6066 and it obsoletes RFCs 5077, 5246, and 6961.  This document also specifies new requirements for TLS 1.2 implementations.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-tls13-28' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-tls13-28.txt' />
</reference>


<reference anchor="BLAKE2" >
  <front>
    <title>BLAKE2 -- simpler, smaller, fast as MD5</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="Noise" >
  <front>
    <title>The Noise Protocol Framework</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="WireGuard" >
  <front>
    <title>WireGuard -- Next Generation Kernel Network Tunnel</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="SIGMA" >
  <front>
    <title>SIGMA -- The ‘SIGn-and-MAc’ Approach to Authenticated Diffie-Hellman and Its Use in the IKE-Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CurveCP" >
  <front>
    <title>CurveCP -- Usable security for the Internet</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="Curve25519" >
  <front>
    <title>Curve25519 - new Diffie-Hellman speed records</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="MinimalT" >
  <front>
    <title>MinimaLT -- Minimal-latency Networking Through Better Security</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAMXj9VoAA91963IbR5bm/3qKXOmHwWgAkihRtth7aZqULLYsiS1S9nRv
bGwUgARQZqEKW1lFClY4Yh5j513m377JPMmea14KRUreno7Y3Q63TQB1yTx5
8pzvXHMymWRt0Zb22JyYy665sTtTL81Vk1duWzetubTzrinanblo6rae16XL
8tmssTfHpvUXOb3I0ROyRT2v8g08c9Hky3ZS2HY5afOtm/hbJnrL5PGTbJG3
9jibw79XdbM7NkW1rLOs2Db4js61h48fv3h8mF3b3W3dLI7NedXaprLt5Awf
n2WuzavFf8/LuoJX7qzLtsWx+a8w2rFx8K7GLh38tdvgH/8ty/KuXdfNcWbM
BP5v4HXu2FxNzUXelTv6hgd/VW82u+jbulkBlbbb0sII5lP6zsHTbXts3ldW
frrIm2vzc863zGGGx+a029qmLap6bE7zsljWTVXk5sXR4yfP+Kq6q1qc+Meq
aO3CXLZACofrcLKxTTHP6Sq7yYsSKLLFAf0px5dN5/UmncYpTMM21/B3NJHT
uiyq5HuaCrztxjYO1w1e9UOZu1V9m8zqcr6u6xJ/Pa032w6msILvClvNbTQ9
udOYH54cmu/+8pfBOb2Bexc0Wj+Tudv+Cf7Pw5rCkNKpvJmaD7Wz0Tze7IC+
/jtejuscHmau7Hxd1WW9Kiws9d7qPDl6bL5v6nxxm65Lvpk1xWJlx+btiXl8
+OTZ/8F6XDcwoD/Rv/fnAMtxMjU/1/UiXo51U7i23q5tk/z6fwd/zfNbGFDE
X1lVN5u8BV45pus+vDo9fPrdUfhw9Pg7/+Hp4fMn4cPRs3DZ02+fRL+8eBbu
efb08WH84Wn4cHQUHnB0+Ox5+PDt4dPow/Pkw7Pw4bvnL8KHF4fhac8fPw9P
e/702bf+w7cwoejDi3DZt08fhyl8e/Q0PPq7xy/Co787PJRfzidnUxZ+pZss
4F9Pnt7xw2ReV5Wdt0VdTYpF76Kmnd/aWRCZeTNf958z3xbVHP8zb3bb9s5f
bVX3fvsfXTEPcnnwx9INjDqazfc/nrx5KUtojKgT/tJMJsYVG+ClBkTwJi/p
j2XuWpM78/bsSG7qGmC9ddtu3fGjR7Myv7aHU5Dw+ud2sZQLWXg7fZnuNv4f
7bk/27yaXKyLsthuYdN0m9y5urr7+st809nSvLM31t191d/q+ro2PxflvP40
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

-->

</rfc>

