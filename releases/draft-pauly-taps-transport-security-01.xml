<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.1.2 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes"?>

<rfc ipr="trust200902" docName="draft-pauly-taps-transport-security-01" category="info">

  <front>
    <title abbrev="transport security survey">A Survey of Transport Security Protocols</title>

    <author initials="T." surname="Pauly" fullname="Tommy Pauly">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>tpauly@apple.com</email>
      </address>
    </author>
    <author initials="K." surname="Rose" fullname="Kyle Rose">
      <organization>Akamai Technologies, Inc.</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge, MA 02144</city>
          <country>United States of America</country>
        </postal>
        <email>krose@krose.org</email>
      </address>
    </author>
    <author initials="C.A." surname="Wood" fullname="Christopher A. Wood">
      <organization>Apple Inc.</organization>
      <address>
        <postal>
          <street>1 Infinite Loop</street>
          <city>Cupertino, California 95014</city>
          <country>United States of America</country>
        </postal>
        <email>cawood@apple.com</email>
      </address>
    </author>

    <date year="2018" month="January" day="03"/>

    
    
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This document provides a survey of commonly used or notable network security protocols, with a focus on how they interact and integrate with applications and transport protocols. Its goal is to supplement efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer Security (DTLS), Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, Internet Key Exchange with Encapsulating Security Protocol (IKEv2 + ESP), SRTP (with DTLS), and WireGuard. This survey is not limited to protocols developed within the scope or context of the IETF.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>This document provides a survey of commonly used or notable network security protocols, with a focus on how they interact and integrate with applications and transport protocols.  Its goal is to supplement efforts to define and catalog transport services <xref target="RFC8095"/> by describing the interfaces required to add security protocols. It examines Transport Layer Security (TLS), Datagram Transport Layer Security (DTLS), Quick UDP Internet Connections with TLS (QUIC + TLS), MinimalT, CurveCP, tcpcrypt, Internet Key Exchange with Encapsulating Security Protocol (IKEv2 + ESP), SRTP (with DTLS), and WireGuard. This survey is not limited to protocols developed within the scope or context of the IETF.</t>

<t>For each protocol, this document provides a brief description, the security features it provides, and the dependencies it has on the underlying transport. This is followed by defining the set of transport security features shared by these protocols. Finally, we distill the application and transport interfaces provided by the transport security protocols.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The following terms are used throughout this document to describe the roles and interactions of transport security protocols:</t>

<t><list style="symbols">
  <t>Transport Feature: a specific end-to-end feature that the transport layer provides to an application.  Examples include confidentiality, reliable delivery, ordered delivery, message-versus-stream orientation, etc.</t>
  <t>Transport Service: a set of Transport Features, without an association to any given framing protocol, which provides a functionality to an application.</t>
  <t>Transport Protocol: an implementation that provides one or more different transport services using a specific framing and header format on the wire. A Transport Protocol services an application.</t>
  <t>Application: an entity that uses a transport protocol for end-to-end delivery of data across the network (this may also be an upper layer protocol or tunnel encapsulation).</t>
  <t>Security Feature: a specific feature that a network security layer provides to applications. Examples include authentication, encryption, key generation, session resumption, and privacy. A feature may be considered to be Mandatory or Optional to an application’s implementation.</t>
  <t>Security Protocol: a defined network protocol that implements one or more security features. Security protocols may be used alongside transport protocols, and in combination with one another when appropriate.</t>
  <t>Handshake Protocol: a security protocol that performs a handshake to validate peers and establish a shared cryptographic key.</t>
  <t>Record Protocol: a security protocol that allows data to be encrypted in records or datagrams based on a shared cryptographic key.</t>
  <t>Session: an ephemeral security association between applications.</t>
  <t>Connection: the shared state of two or more endpoints that persists across messages that are transmitted between these endpoints. A connection is a transient participant of a session, and a session generally lasts between connection instances.</t>
  <t>Connection Mobility: a property of a connection that allows it to be multihomed or resilient across network interface or address changes.</t>
  <t>Peer: an endpoint application party to a session.</t>
  <t>Client: the peer responsible for initiating a session.</t>
  <t>Server: the peer responsible for responding to a session initiation.</t>
</list></t>

</section>
<section anchor="transport-security-protocol-descriptions" title="Transport Security Protocol Descriptions">

<t>This section contains descriptions of security protocols that currently used to protect data being sent over a network.</t>

<t>For each protocol, we describe the features it provides and its dependencies on other protocols.</t>

<section anchor="tls" title="TLS">

<t>TLS (Transport Layer Security) <xref target="RFC5246"/> is a common protocol used to establish a secure session between two endpoints. Communication
over this session “prevents eavesdropping, tampering, and message forgery.” TLS consists
of a tightly coupled handshake and record protocol. The handshake protocol is used to authenticate peers,
negotiate protocol options, such as cryptographic algorithms, and derive session-specific
keying material. The record protocol is used to marshal (possibly encrypted) data from one
peer to the other. This data may contain handshake messages or raw application data.</t>

<section anchor="protocol-description" title="Protocol Description">

<t>TLS is the composition of a handshake and record protocol <xref target="I-D.ietf-tls-tls13"/>.
The record protocol is designed to marshal an arbitrary, in-order stream of bytes from one endpoint to the other.
It handles segmenting, compressing (when enabled), and encrypting data into discrete records. When configured
to use an AEAD algorithm, it also handles nonce generation and encoding for each record. The record protocol is
hidden from the client behind a byte stream-oriented API.</t>

<t>The handshake protocol serves several purposes, including: peer authentication, protocol option (key exchange
algorithm and ciphersuite) negotiation, and key derivation. Peer authentication may be mutual. However, commonly,
only the server is authenticated. X.509 certificates are commonly used in this authentication step, though
other mechanisms, such as raw public keys <xref target="RFC7250"/>, exist. The client is not authenticated unless explicitly
requested by the server with a CertificateRequest handshake message.</t>

<t>The handshake protocol is also extensible. It allows for a variety of extensions to be included by either the client
or server. These extensions are used to specify client preferences, e.g., the application-layer protocol to be driven
with the TLS connection <xref target="RFC7301"/>, or signals to the server to aid operation, e.g., the server name <xref target="RFC6066"/>. Various extensions also exist
to tune the parameters of the record protocol, e.g., the maximum fragment length <xref target="RFC6066"/>.</t>

<t>Alerts are used to convey errors and other atypical events to the endpoints. There are two classes of alerts: closure
and error alerts. A closure alert is used to signal to the other peer that the sender wishes to terminate the connection.
The sender typically follows a close alert with a TCP FIN segment to close the connection. Error alerts are used to
indicate problems with the handshake or individual records. Most errors are fatal and are followed by connection
termination. However, warning alerts may be handled at the discretion of each respective implementation.</t>

<t>Once a session is disconnected all session keying material must be torn down, unless resumption information was previously
negotiated. TLS supports stateful and stateless resumption. (Here, the state refers to the information requirements
for the server. It is assumed that the client must always store some state information in order to resume a session.)</t>

</section>
<section anchor="protocol-features" title="Protocol Features">

<t><list style="symbols">
  <t>Key exchange and ciphersuite algorithm negotiation.</t>
  <t>Stateful and stateless session resumption.</t>
  <t>Certificate- and raw public-key-based authentication.</t>
  <t>Mutual client and server authentication.</t>
  <t>Byte stream confidentiality and integrity.</t>
  <t>Extensibility via well-defined extensions.</t>
  <t>0-RTT data support (in TLS 1.3 only).</t>
  <t>Application-layer protocol negotiation.</t>
  <t>Transparent data segmentation.</t>
</list></t>

<!-- caw: possibles to add -->
<!-- - identity hiding -->

</section>
<section anchor="protocol-dependencies" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP for in-order, reliable transport.</t>
  <t>(Optionally) A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="dtls" title="DTLS">

<t>DTLS (Datagram Transport Layer Security) <xref target="RFC6347"/> is based on TLS, but differs in that
it is designed to run over UDP instead of TCP. Since UDP does not guarantee datagram
ordering or reliability, DTLS modifies the protocol to make sure it can still provide
the same security guarantees as TLS. DTLS was designed to be as close to TLS as possible,
so this document will assume that all properties from TLS are carried over except where specified.</t>

<section anchor="protocol-description-1" title="Protocol Description">

<t>DTLS is modified from TLS to account for packet loss and reordering that occur when operating over a datagram-based transport, i.e., UDP. Each message is assigned an explicit sequence number to be used to reorder on the receiving end. This removes the inter-record dependency and allows each record to be decrypt in isolation of the rest. However, DTLS does not deviate from TLS in that in still provides in-order delivery of data to the application.</t>

<t>With respect to packet loss, if one peer has sent a handshake message and has not yet received its expected response, it will retransmit the handshake message after a configurable timeout.</t>

<t>To account for long records that cannot fit within a single UDP datagram, DTLS supports fragmentation of records across datagrams, keeping track of fragment offsets and lengths in each datagram. The receiving peer must re-assemble records before decrypting.</t>

<t>DTLS relies on UDP’s port numbers to allow peers with multiple DTLS sessions between them to demultiplex ‘streams’ of encrypted packets that share a single TLS session.</t>

<t>Since datagrams may be replayed, DTLS provides anti-replay detection based on a window of acceptable sequence numbers <xref target="RFC4303"/>.</t>

</section>
<section anchor="protocol-features-1" title="Protocol Features">

<t><list style="symbols">
  <t>Anti-replay protection between datagrams.</t>
  <t>Basic reliability for handshake messages.</t>
  <t>See also the features from TLS.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-1" title="Protocol Dependencies">

<t><list style="symbols">
  <t>Since DTLS runs over an unreliable, unordered datagram transport, it does not require any reliability features.</t>
  <t>DTLS contains its own length, so although it runs over a datagram transport, it does not rely on the transport protocol supporting framing.</t>
  <t>UDP for port numbers used for demultiplexing.</t>
  <t>Path MTU discovery.</t>
</list></t>

</section>
</section>
<section anchor="quic-with-tls" title="QUIC with TLS">

<t>QUIC (Quick UDP Internet Connections) is a new transport protocol that runs over UDP, and was
originally designed with a tight integration with its security protocol and application protocol
mappings. The QUIC transport layer itself provides support for data confidentiality and integrity.
This requires keys to be derived with a separate handshake protocol. A mapping for QUIC over
TLS 1.3 <xref target="I-D.ietf-quic-tls"/> has been specified to provide this handshake.</t>

<section anchor="protocol-description-2" title="Protocol Description">

<t>Since QUIC integrates TLS with its transport, it relies on specific integration points
between its security and transport sides. Specifically, these points are:</t>

<t><list style="symbols">
  <t>Starting the handshake to generate keys and provide authentication (and providing the transport for the handshake).</t>
  <t>Client address validation.</t>
  <t>Key ready events from TLS to notify the QUIC transport.</t>
  <t>Exporting secrets from TLS to the QUIC transport.</t>
</list></t>

<t>The QUIC transport layer support multiple streams over a single connection. The first
stream is reserved specifically for a TLS connection. The TLS handshake, along with
further records, are sent over this stream. This TLS connection follows the TLS standards
and inherits the security properties of TLS. The handshake generates keys, which are
then exported to the rest of the QUIC connection, and are used to protect the rest of the streams.</t>

<t>Initial QUIC messages (packets) are encrypted using “fixed” keys derived from the QUIC version and 
public packet information (Connection ID). Packets are later encrypted using keys derived
from the TLS traffic secret upon handshake completion. The TLS 1.3
handshake for QUIC is used in either a single-RTT mode or a fast-open zero-RTT mode. When
zero-RTT handshakes are possible, the encryption first transitions to use the zero-RTT keys
before using single-RTT handshake keys after the next TLS flight.</t>

</section>
<section anchor="protocol-features-2" title="Protocol Features">

<t><list style="symbols">
  <t>Handshake properties of TLS.</t>
  <t>Multiple encrypted streams over a single connection without head-of-line blocking.</t>
  <t>Packet payload encryption and complete packet authentication (with the exception of the Public Reset packet, which is not authenticated).</t>
</list></t>

</section>
<section anchor="protocol-dependencies-2" title="Protocol Dependencies">

<t><list style="symbols">
  <t>QUIC transport relies on UDP.</t>
  <t>QUIC transport relies on TLS 1.3 for authentication and initial key derivation.</t>
  <t>TLS within QUIC relies on a reliable stream abstraction for its handshake.</t>
</list></t>

</section>
</section>
<section anchor="minimalt" title="MinimalT">

<t>MinimalT is a UDP-based transport security protocol designed to offer confidentiality, mutual authentication, DoS prevention, and connection
mobility <xref target="MinimalT"/>. One major goal of the protocol is to leverage existing protocols to obtain server-side configuration information used to
more quickly bootstrap a connection. MinimalT uses a variant of TCP’s congestion control algorithm.</t>

<section anchor="protocol-description-3" title="Protocol Description">

<t>MinimalT is a secure transport protocol built on top of a widespread directory service. Clients and servers interact with local directory
services to (a) resolve server information and (b) public ephemeral state information, respectively. Clients connect to a local
resolver once at boot time. Through this resolver they recover the IP address(es) and public key(s) of each server to which
they want to connect.</t>

<t>Connections are instances of user-authenticated, mobile sessions between two endpoints. Connections run within tunnels between hosts. A tunnel
is a server-authenticated container that multiplexes multiple connections between the same hosts. All connections in a tunnel share the
same transport state machine and encryption. Each tunnel has a dedicated control connection used to configure and manage the tunnel over time.
Moreover, since tunnels are independent of the network address information, they may be reused as both ends of the tunnel move about the network.
This does however imply that the connection establishment and packet encryption mechanisms are coupled.</t>

<t>Before a client connects to a remote service, it must first establish a tunnel to the host providing or offering the service. Tunnels are established
in 1-RTT using an ephemeral key obtained from the directory service. Tunnel initiators provide their own ephemeral key and, optionally, a
DoS puzzle solution such that the recipient (server) can verify the authenticity of the request and derive a shared secret. Within a tunnel,
new connections to services may be established.</t>

</section>
<section anchor="protocol-features-3" title="Protocol Features">

<t><list style="symbols">
  <t>0-RTT forward secrecy for new connections.</t>
  <t>DoS prevention by client-side puzzles.</t>
  <t>Tunnel-based mobility.</t>
  <t>(Transport Feature) Connection multiplexing between hosts across shared tunnels.</t>
  <t>(Transport Feature) Congestion control state is shared across connections between the same host pairs.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-3" title="Protocol Dependencies">

<t><list style="symbols">
  <t>A DNS-like resolution service to obtain location information (an IP address) and ephemeral keys.</t>
  <t>A PKI trust store for certificate validation.</t>
</list></t>

</section>
</section>
<section anchor="curvecp" title="CurveCP">

<t>CurveCP <xref target="CurveCP"/> is a UDP-based transport security protocol from Daniel J. Bernstein.
Unlike other transport security protocols, it is based entirely upon highly efficient public
key algorithms. This removes many pitfalls associated with nonce reuse and key synchronization.</t>

<section anchor="protocol-description-4" title="Protocol Description">

<t>CurveCP is a UDP-based transport security protocol. It is built on three principal features: exclusive use of public key authenticated
encryption of packets, server-chosen cookies to prohibit memory and computation DoS at the server, and connection mobility with a
client-chosen ephemeral identifier.</t>

<t>There are two rounds in CurveCP. In the first round, the client sends its first initialization packet to the server, carrying its (possibly fresh)
ephemeral public key C’, with zero-padding encrypted under the server’s long-term public key. The server replies with a cookie and its own ephemeral
key S’ and a cookie that is to be used by the client. Upon receipt, the client then generates its second initialization packet carrying: the
ephemeral key C’, cookie, and an encryption of C’, the server’s domain name, and, optionally, some message data. The server verifies the cookie
and the encrypted payload and, if valid, proceeds to send data in return. At this point, the connection is established and the two
parties can communicate.</t>

<t>The use of only public-key encryption and authentication, or “boxing”, is done to simplify problems that come with symmetric key management
and synchronization. For example, it allows the sender of a message to be in complete control of each message’s nonce. It does not require
either end to share secret keying material. And it allows ephemeral public keys to be associated with connections (or sessions).</t>

<t>The client and server do not perform a standard key exchange. Instead, in the initial exchange of packets, the each party provides its
own ephemeral key to the other end. The client can choose a new ephemeral key for every new connection. However, the server must rotate
these keys on a slower basis. Otherwise, it would be trivial for an attacker to force the server to create and store ephemeral keys
with a fake client initialization packet.</t>

<t>Unlike TCP, the server employs cookies to enable source validation. After receiving the client’s initial packet, encrypted under the server’s
long-term public key, the server generates and returns a stateless cookie that must be echoed back in the client’s following message.
This cookie is encrypted under the client’s ephemeral public key.
This stateless technique prevents attackers from hijacking client initialization packets to obtain cookie values to flood clients. (A client
would detect the duplicate cookies and reject the flooded packets.) Similarly, replaying the client’s second packet, carrying the cookie,
will be detected by the server.</t>

<t>CurveCP supports a weak form of client authentication. Clients are permitted to send their long-term public keys in the second initialization
packet. A server can verify this public key and, if untrusted, drop the connection and subsequent data.</t>

<t>Unlike some other protocols, CurveCP data packets only leave the ephemeral public key, i.e., the connection ID, and the per-message nonce
in the clear. Everything else is encrypted.</t>

</section>
<section anchor="protocol-features-4" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure data encryption and authentication.</t>
  <t>Per-packet public-key encryption.</t>
  <t>1-RTT session bootstrapping.</t>
  <t>Connection mobility based on a client-chosen ephemeral identifier.</t>
  <t>Connection establishment message padding to prevent traffic amplification.</t>
  <t>Sender-chosen explicit nonces, e.g., based on a sequence number.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-4" title="Protocol Dependencies">

<t><list style="symbols">
  <t>An unreliable transport protocol such as UDP.</t>
</list></t>

</section>
</section>
<section anchor="tcpcrypt" title="tcpcrypt">

<t>Tcpcrypt is a lightweight extension to the TCP protocol to enable opportunistic encryption with hooks available to the application layer for implementation of endpoint authentication.</t>

<section anchor="protocol-description-5" title="Protocol Description">

<t>Tcpcrypt extends TCP to enable opportunistic encryption between the two ends of a TCP connection <xref target="I-D.ietf-tcpinc-tcpcrypt"/>.
It is a family of TCP encryption protocols (TEP), distinguished by key exchange algorithm.
The use of a TEP is negotiated with a TCP option during the initial TCP handshake via the mechanism described by TCP Encryption Negotiation Option (ENO) <xref target="I-D.ietf-tcpinc-tcpeno"/>.
In the case of initial session establishment, once a tcpcrypt TEP has been negotiated the key exchange occurs within the data segments of the first few packets exchanged after the handshake completes. The initiator of a connection sends a list of supported AEAD algorithms, a random nonce, and an ephemeral public key share.
The responder typically chooses a mutually-supported AEAD algorithm and replies with this choice, its own nonce, and ephemeral key share.
An initial shared secret is derived from the ENO handshake, the tcpcrypt handshake, and the initial keying material resulting from the key exchange. The traffic encryption keys on the initial connection are derived from the shared secret.
Connections can be re-keyed before the natural AEAD limit for a single set of traffic encryption keys is reached.</t>

<t>Each tcpcrypt session is associated with a ladder of resumption IDs, each derived from the respective entry in a ladder of shared secrets.
These resumption IDs can be used to negotiate a stateful resumption of the session in a subsequent connection, resulting in use of a new shared secret and traffic encryption keys without requiring a new key exchange.
Willingness to resume a session is signaled via the ENO option during the TCP handshake.
Given the length constraints imposed by TCP options, unlike stateless resumption mechanisms (such as that provided by session tickets in TLS) resumption in tcpcrypt requires the maintenance of state on the server, and so successful resumption across a pool of servers implies shared state.</t>

<t>Owing to middlebox ossification issues, tcpcrypt only protects the payload portion of a TCP packet.
It does not encrypt any header information, such as the TCP sequence number.</t>

<t>Tcpcrypt exposes a universally-unique connection-specific session ID to the application, suitable for application-level endpoint authentication either in-band or out-of-band.</t>

</section>
<section anchor="protocol-features-5" title="Protocol Features">

<t><list style="symbols">
  <t>Forward-secure TCP payload encryption and integrity protection.</t>
  <t>Session caching and address-agnostic resumption.</t>
  <t>Connection re-keying.</t>
  <t>Application-level authentication primitive.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-5" title="Protocol Dependencies">

<t><list style="symbols">
  <t>TCP</t>
  <t>TCP Encryption Negotiation Option (ENO)</t>
</list></t>

</section>
</section>
<section anchor="ikev2-with-esp" title="IKEv2 with ESP">

<t>IKEv2 <xref target="RFC7296"/> and ESP <xref target="RFC4303"/> together form the modern IPsec protocol suite that encrypts and authenticates IP packets, either as for creating tunnels (tunnel-mode) or for direct transport connections (transport-mode). This suite of protocols separates out the key generation protocol (IKEv2) from the transport encryption protocol (ESP). Each protocol can be used independently, but this document considers them together, since that is the most common pattern.</t>

<section anchor="protocol-descriptions" title="Protocol descriptions">

<section anchor="ikev2" title="IKEv2">

<t>IKEv2 is a control protocol that runs on UDP port 500. Its primary goal is to generate keys for Security Associations (SAs). It first uses a Diffie-Hellman key exchange to generate keys for the “IKE SA”, which is a set of keys used to encrypt further IKEv2 messages. It then goes through a phase of authentication in which both peers present blobs signed by a shared secret or private key, after which another set of keys is derived, referred to as the “Child SA”. These Child SA keys are used by ESP.</t>

<t>IKEv2 negotiates which protocols are acceptable to each peer for both the IKE and Child SAs using “Proposals”. Each proposal may contain an encryption algorithm, an authentication algorithm, a Diffie-Hellman group, and (for IKE SAs only) a pseudorandom function algorithm. Each peer may support multiple proposals, and the most preferred mutually supported proposal is chosen during the handshake.</t>

<t>The authentication phase of IKEv2 may use Shared Secrets, Certificates, Digital Signatures, or an EAP (Extensible Authentication Protocol) method. At a minimum, IKEv2 takes two round trips to set up both an IKE SA and a Child SA. If EAP is used, this exchange may be expanded.</t>

<t>Any SA used by IKEv2 can be rekeyed upon expiration, which is usually based either on time or number of bytes encrypted.</t>

<t>There is an extension to IKEv2 that allows session resumption <xref target="RFC5723"/>.</t>

<t>MOBIKE is a Mobility and Multihoming extension to IKEv2 that allows a set of Security Associations to migrate over different addresses and interfaces <xref target="RFC4555"/>.</t>

<t>When UDP is not available or well-supported on a network, IKEv2 may be encapsulated in TCP <xref target="I-D.ietf-ipsecme-tcp-encaps"/>.</t>

</section>
<section anchor="esp" title="ESP">

<t>ESP is a protocol that encrypts and authenticates IP and IPv6 packets. The keys used for both encryption and authentication can be derived from an IKEv2 exchange. ESP Security Associations come as pairs, one for each direction between two peers. Each SA is identified by a Security Parameter Index (SPI), which is marked on each encrypted ESP packet.</t>

<t>ESP packets include the SPI, a sequence number, an optional Initialization Vector (IV), payload data, padding, a length and next header field, and an Integrity Check Value.</t>

<t>From <xref target="RFC4303"/>, “ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.”</t>

<t>Since ESP operates on IP packets, it is not directly tied to the transport protocols it encrypts. This means it requires little or no change from transports in order to provide security.</t>

<t>ESP packets are sent directly over IP, except when a NAT is present, in which case they are sent on UDP port 4500, or via TCP encapsulation <xref target="I-D.ietf-ipsecme-tcp-encaps"/>.</t>

</section>
</section>
<section anchor="protocol-features-6" title="Protocol features">

<section anchor="ikev2-1" title="IKEv2">

<t><list style="symbols">
  <t>Encryption and authentication of handshake packets.</t>
  <t>Cryptographic algorithm negotiation.</t>
  <t>Session resumption.</t>
  <t>Mobility across addresses and interfaces.</t>
  <t>Peer authentication extensibility based on Shared Secret, Certificates, Digital Signatures, or EAP methods.</t>
</list></t>

</section>
<section anchor="esp-1" title="ESP">

<t><list style="symbols">
  <t>Data confidentiality and authentication.</t>
  <t>Connectionless integrity.</t>
  <t>Anti-replay protection.</t>
  <t>Limited flow confidentiality.</t>
</list></t>

</section>
</section>
<section anchor="protocol-dependencies-6" title="Protocol dependencies">

<section anchor="ikev2-2" title="IKEv2">

<t><list style="symbols">
  <t>Availability of UDP to negotiate, or implementation support for TCP-encapsulation.</t>
  <t>Some EAP authentication types require accessing a hardware device, such as a SIM card; or interacting with a user, such as password prompting.</t>
</list></t>

</section>
<section anchor="esp-2" title="ESP">

<t><list style="symbols">
  <t>Since ESP is below transport protocols, it does not have any dependencies on the transports themselves, other than on UDP or TCP for NAT traversal.</t>
</list></t>

</section>
</section>
</section>
<section anchor="wireguard" title="WireGuard">

<t>WireGuard is a layer 3 protocol designed to complement or replace IPsec <xref target="WireGuard"/>.
Unlike most transport security protocols, which rely on PKI for peer authentication, 
WireGuard authenticates peers using pre-shared public keys delivered out-of-band, each 
of which is bound to one or more IP addresses. 
Moreover, as a protocol suited for VPNs, WireGuard offers no extensibility, negotiation, 
or cryptographic agility.</t>

<section anchor="protocol-description-6" title="Protocol description">

<t>WireGuard is a simple VPN protocol that binds a pre-shared public key to one or more
IP addresses. Users configure WireGuard by associating peer public keys with IP addresses. 
These mappings are stored in a CryptoKey Routing Table. (See Section 2 of <xref target="WireGuard"/>
for more details and sample configurations.) These keys are used upon WireGuard packet 
transmission and reception. For example, upon receipt of a Handshake Initiation message,
receivers use the static public key in their CryptoKey routing table to perform necessary
cryptographic computations.</t>

<t>WireGuard builds on Noise <xref target="Noise"/> for 1-RTT key exchange with identity hiding. The handshake
hides peer identities as per the SIGMA construction <xref target="SIGMA"/>. As a consequence of using Noise, 
WireGuard comes with a fixed set of cryptographic algorithms:</t>

<t><list style="symbols">
  <t>x25519 <xref target="Curve25519"/> and HKDF <xref target="RFC5869"/> for ECDH and key derivation.</t>
  <t>ChaCha20+Poly1305 <xref target="RFC7539"/> for packet authenticated encryption.</t>
  <t>BLAKE2s <xref target="BLAKE2"/> for hashing.</t>
</list></t>

<t>There is no cryptographic agility. If weaknesses are found in any of
these algorithms, new message types using new algorithms must be introduced.</t>

<t>WireGuard is designed to be entirely stateless, modulo the CryptoKey routing table, which has size
linear with the number of trusted peers. If a WireGuard receiver is under heavy load and cannot process
a packet, e.g., cannot spare CPU cycles for point multiplication, it can reply with a cookie similar
to DTLS and IKEv2. This cookie only proves IP address ownership. Any rate limiting scheme can be applied
to packets coming from non-spoofed addresses.</t>

</section>
<section anchor="protocol-features-7" title="Protocol features">

<t><list style="symbols">
  <t>Optional PSK-based session creation.</t>
  <t>Mutual client and server authentication.</t>
  <t>Stateful, timestamp-based replay prevention.</t>
  <t>Cookie-based DoS mitigation similar to DTLS and IKEv2.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-7" title="Protocol dependencies">

<t><list style="symbols">
  <t>Datagram transport.</t>
  <t>Out-of-band key distribution and management.</t>
</list></t>

</section>
</section>
<section anchor="srtp-with-dtls" title="SRTP (with DTLS)">

<t>SRTP – Secure RTP – is a profile for RTP that provides confidentiality, message 
authentication, and replay protection for data and control packets <xref target="RFC3711"/>.
SRTP packets are encrypted using a session key, which is derived from a separate
master key. Master keys are derived and managed externally, e.g., via DTLS, as specified
in RFC 5736 <xref target="RFC5763"/>.</t>

<section anchor="protocol-descriptions-1" title="Protocol descriptions">

<t>SRTP adds confidentiality and, optionally, integrity protection to SRTP packets. 
This is done by encrypting RTP payloads and optionally appending an authentication
tag (MAC) to the packet trailer. Packets are encrypted using session keys, which
are ultimately derived from a master key and some additional master salt and session salt.
SRTP packets carry a 2-byte sequence number to partially identify the unique packet
index. SRTP peers maintain a separate rollover counter (ROC) that is incremented whenever
the sequence number wraps. The sequence number and ROC together determine the packet index.
Packets also carry</t>

<t>Numerous encryption modes are supported. For popular modes of operation, e.g., AES-CTR, 
The (unique) initialization vector (IV) used for each encryption mode is a function of 
the RTP SSRC (synchronization source), packet index, and session “salting key”.</t>

<t>SRTP offers replay detection by keeping a Replay List of already seen and processed packet indices. 
If a packet arrives with an index that matches one in the Replay List, it is silently discarded.</t>

<t>DTLS <xref target="RFC5764"/> is commonly used as a way to perform mutually authentication key 
establishment for SRTP <xref target="RFC5763"/>. (Here, certificates marshall public keys between
endpoints. Thus, self-signed certificates may be used if peers do not mutually trust one another, 
as is common on the Internet.) When DTLS is used, certificate fingerprints are transmitted
out-of-band using SIP. Peers typically verify that DTLS-offered certificates match
that which are offered over SIP. This prevents active attacks on RTP, but not on the signalling
(SIP) channel.</t>

</section>
<section anchor="protocol-features-8" title="Protocol features">

<t><list style="symbols">
  <t>Optional replay protection with tunable replay windows.</t>
  <t>Out-of-order packet receipt.</t>
  <t>(RFC5763) Mandatory mutually authenticated key exchange.</t>
</list></t>

</section>
<section anchor="protocol-dependencies-8" title="Protocol dependencies">

<t><list style="symbols">
  <t>External key derivation and management mechanism or protocol, e.g., DTLS <xref target="RFC5763"/>.</t>
</list></t>

</section>
</section>
</section>
<section anchor="common-transport-security-features" title="Common Transport Security Features">

<t>There exists a common set of features shared across the transport protocols surveyed in this document.
The mandatory features should be provided by any transport security protocol, while the optional features
are extensions that a subset of the protocols provide. For clarity, we also distinguish between handshake
and record features.</t>

<section anchor="mandatory-features" title="Mandatory Features">

<section anchor="handshake" title="Handshake">

<t><list style="symbols">
  <t>Forward-secure segment encryption and authentication: Transit data must be protected with an
authenticated encryption algorithm.</t>
  <t>Private key interface or injection: Authentication based on public key signatures is commonplace for
many transport security protocols.</t>
  <t>Endpoint authentication: The endpoint (receiver) of a new connection must be authenticated before any
data is sent to said party.</t>
  <t>Source validation: Source validation must be provided to mitigate server-targeted DoS attacks. This can
be done with puzzles or cookies.</t>
</list></t>

</section>
<section anchor="record" title="Record">

<t><list style="symbols">
  <t>Pre-shared key support: A record protocol must be able to use a pre-shared key established
out-of-band to encrypt individual messages, packets, or datagrams.</t>
</list></t>

</section>
</section>
<section anchor="optional-features" title="Optional Features">

<section anchor="handshake-1" title="Handshake">

<t><list style="symbols">
  <t>Mutual authentication: Transport security protocols should allow both endpoints to authenticate one another if needed.</t>
  <t>Application-layer feature negotiation: The type of application using a transport security protocol often requires
features configured at the connection establishment layer, e.g., ALPN <xref target="RFC7301"/>. Moreover, application-layer features may often be used to
offload the session to another server which can better handle the request. (The TLS SNI is one example of such a feature.)
As such, transport security protocols should provide a generic mechanism to allow for such application-specific features
and options to be configured or otherwise negotiated.</t>
  <t>Configuration extensions: The protocol negotiation should be extensible with addition of new configuration options.</t>
  <t>Session caching and management: Sessions should be cacheable to enable reuse and amortize the cost of performing
session establishment handshakes.</t>
</list></t>

</section>
<section anchor="record-1" title="Record">

<t><list style="symbols">
  <t>Connection mobility: Sessions should not be bound to a network connection (or 5 tuple). This allows cryptographic
key material and other state information to be reused in the event of a connection change. Examples of this include
a NAT rebinding that occurs without a client’s knowledge.</t>
</list></t>

</section>
</section>
</section>
<section anchor="transport-security-protocol-interfaces" title="Transport Security Protocol Interfaces">

<t>This section describes the interface surface exposed by the security protocols described
above, with each interface. Note that not all protocols support each interface.</t>

<section anchor="configuration-interfaces" title="Configuration Interfaces">

<t>Configuration interfaces are used to configure the security protocols before a
handshake begins or the keys are negotiated.</t>

<t><list style="symbols">
  <t>Identity and Private Keys<vspace />
The application can provide its identities (certificates) and private keys, or
mechanisms to access these, to the security protocol to use during handshakes.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP</t>
  <t>Supported Algorithms (Key Exchange, Signatures and Ciphersuites)<vspace />
The application can choose the algorithms that are supported for key exchange,
signatures, and ciphersuites.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2, SRTP</t>
  <t>Session Cache<vspace />
The application provides the ability to save and retrieve session state (tickets,
keying material, server parameters) that may be used to resume the security session.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT</t>
  <t>Authentication Delegate<vspace />
The application provides access to a separate module that will provide authentication,
using EAP for example.<vspace />
Protocols: IKEv2, SRTP</t>
</list></t>

</section>
<section anchor="handshake-interfaces" title="Handshake Interfaces">

<t>Handshake interfaces are the points of interaction between a handshake protocol and
the application, record protocol, and transport once the handshake is active.</t>

<t><list style="symbols">
  <t>Send Handshake Messages<vspace />
The handshake protocol needs to be able to send messages over a transport to the remote peer to establish trust and negotiate keys.<vspace />
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP (DTLS))</t>
  <t>Receive Handshake Messages<vspace />
The handshake protocol needs to be able to receive messages from the remote peer
over a transport to establish trust and negotiate keys.<vspace />
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP (DTLS))</t>
  <t>Identity Validation<vspace />
During a handshake, the security protocol will conduct identity validation of the peer.
This can call into the application to offload validation.
Protocols: All (TLS, DTLS, QUIC + TLS, MinimalT, CurveCP, IKEv2, WireGuard, SRTP (DTLS))</t>
  <t>Source Address Validation<vspace />
The handshake protocol may delegate validation of the remote peer that has sent
data to the transport protocol or application. This involves sending a cookie
exchange to avoid DoS attacks.<vspace />
Protocols: QUIC + TLS, DTLS, WireGuard</t>
  <t>Key Update<vspace />
The handshake protocol may be instructed to update its keying material, either
by the application directly or by the record protocol sending a key expiration event.<vspace />
Protocols: TLS, DTLS, QUIC + TLS, MinimalT, tcpcrypt, IKEv2</t>
  <t>Pre-Shared Key Export<vspace />
The handshake protocol will generate one or more keys to be used for record encryption/decryption and authentication. These may be explicitly exportable to the application, traditionally limited to direct  export to the record protocol, or inherently non-exportable because the keys must be used directly in conjunction with the record protocol.  <list style="symbols">
      <t>Explict export: TLS (for QUIC), tcpcrypt, IKEv2, DTLS (for SRTP)</t>
      <t>Direct export: TLS, DTLS, MinimalT</t>
      <t>Non-exportable: CurveCP</t>
    </list></t>
</list></t>

</section>
<section anchor="record-interfaces" title="Record Interfaces">

<t>Record interfaces are the points of interaction between a record protocol and the application, handshake protocol, and transport once in use.</t>

<t><list style="symbols">
  <t>Pre-Shared Key Import<vspace />
Either the handshake protocol or the application directly can supply pre-shared keys for the record protocol use for encryption/decryption and authentication. If the application can supply keys directly, this is considered explicit import; if the handshake protocol traditionally provides the keys directly, it is considered direct import; if the keys can only be shared by the handshake, they are considered non-importable.
  <list style="symbols">
      <t>Explict import: QUIC, ESP</t>
      <t>Direct import: TLS, DTLS, MinimalT, tcpcrypt, WireGuard</t>
      <t>Non-importable: CurveCP</t>
    </list></t>
  <t>Encrypt application data<vspace />
The application can send data to the record protocol to encrypt it into a format that can be sent on the underlying transport. The encryption step may require that the application data is treated as a stream or as datagrams, and that the transport to send the encrypted records present a stream or datagram interface.
  <list style="symbols">
      <t>Stream-to-Stream Protocols: TLS, tcpcrypt</t>
      <t>Datagram-to-Datagram Protocols: DTLS, ESP, SRTP, WireGuard</t>
      <t>Stream-to-Datagram Protocols: QUIC ((Editor’s Note: This depends on the interface QUIC exposes to applications.))</t>
    </list></t>
  <t>Decrypt application data<vspace />
The application can receive data from its transport to be decrypted using record protocol. The decryption step may require that the incoming transport data is presented as a stream or as datagrams, and that the resulting application data is a stream or datagrams.
  <list style="symbols">
      <t>Stream-to-Stream Protocols: TLS, tcpcrypt</t>
      <t>Datagram-to-Datagram Protocols: DTLS, ESP, SRTP, WireGuard</t>
      <t>Datagram-to-Stream Protocols: QUIC ((Editor’s Note: This depends on the interface QUIC exposes to applications.))</t>
    </list></t>
  <t>Key Expiration<vspace />
The record protocol can signal that its keys are expiring due to reaching a time-based deadline, or a use-based deadline (number of bytes that have been encrypted with the key). This interaction is often limited to signaling between the record layer and the handshake layer.<vspace />
Protocols: ESP ((Editor’s note: One may consider TLS/DTLS to also have this interface))</t>
  <t>Transport mobility<vspace />
The record protocol can be signaled that it is being migrated to another transport or interface due to connection mobility, which may reset address and state validation.<vspace />
Protocols: QUIC, MinimalT, CurveCP, ESP, WireGuard (roaming)</t>
</list></t>

</section>
</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document has on request to IANA.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>This document summarizes existing transport security protocols and their interfaces. 
It does not propose changes to or recommend usage of reference protocols.</t>

</section>
<section anchor="acknowledgments" title="Acknowledgments">

<t>The authors would like to thank Mirja Kühlewind, Brian Trammell, Yannick Sierra,
Frederic Jacobs, and Bob Bradley for their input and feedback on earlier versions
of this draft.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>





<reference  anchor="RFC3711" target='https://www.rfc-editor.org/info/rfc3711'>
<front>
<title>The Secure Real-time Transport Protocol (SRTP)</title>
<author initials='M.' surname='Baugher' fullname='M. Baugher'><organization /></author>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='M.' surname='Naslund' fullname='M. Naslund'><organization /></author>
<author initials='E.' surname='Carrara' fullname='E. Carrara'><organization /></author>
<author initials='K.' surname='Norrman' fullname='K. Norrman'><organization /></author>
<date year='2004' month='March' />
<abstract><t>This document describes the Secure Real-time Transport Protocol (SRTP), a profile of the Real-time Transport Protocol (RTP), which can provide confidentiality, message authentication, and replay protection to the RTP traffic and to the control traffic for RTP, the Real-time Transport Control Protocol (RTCP).   [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='3711'/>
<seriesInfo name='DOI' value='10.17487/RFC3711'/>
</reference>



<reference  anchor="RFC4303" target='https://www.rfc-editor.org/info/rfc4303'>
<front>
<title>IP Encapsulating Security Payload (ESP)</title>
<author initials='S.' surname='Kent' fullname='S. Kent'><organization /></author>
<date year='2005' month='December' />
<abstract><t>This document describes an updated version of the Encapsulating Security Payload (ESP) protocol, which is designed to provide a mix of security services in IPv4 and IPv6.  ESP is used to provide confidentiality, data origin authentication, connectionless integrity, an anti-replay service (a form of partial sequence integrity), and limited traffic flow confidentiality.  This document obsoletes RFC 2406 (November 1998).  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4303'/>
<seriesInfo name='DOI' value='10.17487/RFC4303'/>
</reference>



<reference  anchor="RFC4555" target='https://www.rfc-editor.org/info/rfc4555'>
<front>
<title>IKEv2 Mobility and Multihoming Protocol (MOBIKE)</title>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2006' month='June' />
<abstract><t>This document describes the MOBIKE protocol, a mobility and multihoming extension to Internet Key Exchange (IKEv2).  MOBIKE allows the IP addresses associated with IKEv2 and tunnel mode IPsec Security Associations to change.  A mobile Virtual Private Network (VPN) client could use MOBIKE to keep the connection with the VPN gateway active while moving from one address to another.  Similarly, a multihomed host could use MOBIKE to move the traffic to a different interface if, for instance, the one currently being used stops working.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='4555'/>
<seriesInfo name='DOI' value='10.17487/RFC4555'/>
</reference>



<reference  anchor="RFC5246" target='https://www.rfc-editor.org/info/rfc5246'>
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.2</title>
<author initials='T.' surname='Dierks' fullname='T. Dierks'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2008' month='August' />
<abstract><t>This document specifies Version 1.2 of the Transport Layer Security (TLS) protocol.  The TLS protocol provides communications security over the Internet.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5246'/>
<seriesInfo name='DOI' value='10.17487/RFC5246'/>
</reference>



<reference  anchor="RFC5723" target='https://www.rfc-editor.org/info/rfc5723'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2) Session Resumption</title>
<author initials='Y.' surname='Sheffer' fullname='Y. Sheffer'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<date year='2010' month='January' />
<abstract><t>The Internet Key Exchange version 2 (IKEv2) protocol has a certain computational and communication overhead with respect to the number of round trips required and the cryptographic operations involved. In remote access situations, the Extensible Authentication Protocol (EAP) is used for authentication, which adds several more round trips and consequently latency.</t><t>To re-establish security associations (SAs) upon a failure recovery condition is time consuming especially when an IPsec peer (such as a VPN gateway) needs to re-establish a large number of SAs with various endpoints.  A high number of concurrent sessions might cause additional problems for an IPsec peer during SA re-establishment.</t><t>In order to avoid the need to re-run the key exchange protocol from scratch, it would be useful to provide an efficient way to resume an IKE/IPsec session.  This document proposes an extension to IKEv2 that allows a client to re-establish an IKE SA with a gateway in a highly efficient manner, utilizing a previously established IKE SA.</t><t>A client can reconnect to a gateway from which it was disconnected. The proposed approach encodes partial IKE state into an opaque ticket, which can be stored on the client or in a centralized store, and is later made available to the IKEv2 responder for re-authentication.  We use the term ticket to refer to the opaque data that is created by the IKEv2 responder.  This document does not specify the format of the ticket but examples are provided.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5723'/>
<seriesInfo name='DOI' value='10.17487/RFC5723'/>
</reference>



<reference  anchor="RFC5763" target='https://www.rfc-editor.org/info/rfc5763'>
<front>
<title>Framework for Establishing a Secure Real-time Transport Protocol (SRTP) Security Context Using Datagram Transport Layer Security (DTLS)</title>
<author initials='J.' surname='Fischl' fullname='J. Fischl'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document specifies how to use the Session Initiation Protocol (SIP) to establish a Secure Real-time Transport Protocol (SRTP) security context using the Datagram Transport Layer Security (DTLS) protocol.  It describes a mechanism of transporting a fingerprint attribute in the Session Description Protocol (SDP) that identifies the key that will be presented during the DTLS handshake.  The key exchange travels along the media path as opposed to the signaling path.  The SIP Identity mechanism can be used to protect the integrity of the fingerprint attribute from modification by intermediate proxies.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5763'/>
<seriesInfo name='DOI' value='10.17487/RFC5763'/>
</reference>



<reference  anchor="RFC5764" target='https://www.rfc-editor.org/info/rfc5764'>
<front>
<title>Datagram Transport Layer Security (DTLS) Extension to Establish Keys for the Secure Real-time Transport Protocol (SRTP)</title>
<author initials='D.' surname='McGrew' fullname='D. McGrew'><organization /></author>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document describes a Datagram Transport Layer Security (DTLS) extension to establish keys for Secure RTP (SRTP) and Secure RTP Control Protocol (SRTCP) flows.  DTLS keying happens on the media path, independent of any out-of-band signalling channel present. [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='5764'/>
<seriesInfo name='DOI' value='10.17487/RFC5764'/>
</reference>



<reference  anchor="RFC5869" target='https://www.rfc-editor.org/info/rfc5869'>
<front>
<title>HMAC-based Extract-and-Expand Key Derivation Function (HKDF)</title>
<author initials='H.' surname='Krawczyk' fullname='H. Krawczyk'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<date year='2010' month='May' />
<abstract><t>This document specifies a simple Hashed Message Authentication Code (HMAC)-based key derivation function (HKDF), which can be used as a building block in various protocols and applications.  The key derivation function (KDF) is intended to support a wide range of applications and requirements, and is conservative in its use of cryptographic hash functions.  This document is not an Internet  Standards Track specification; it is published for informational  purposes.</t></abstract>
</front>
<seriesInfo name='RFC' value='5869'/>
<seriesInfo name='DOI' value='10.17487/RFC5869'/>
</reference>



<reference  anchor="RFC6066" target='https://www.rfc-editor.org/info/rfc6066'>
<front>
<title>Transport Layer Security (TLS) Extensions: Extension Definitions</title>
<author initials='D.' surname='Eastlake 3rd' fullname='D. Eastlake 3rd'><organization /></author>
<date year='2011' month='January' />
<abstract><t>This document provides specifications for existing TLS extensions.  It is a companion document for RFC 5246, &quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;.  The extensions specified are server_name, max_fragment_length, client_certificate_url, trusted_ca_keys, truncated_hmac, and status_request.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6066'/>
<seriesInfo name='DOI' value='10.17487/RFC6066'/>
</reference>



<reference  anchor="RFC6347" target='https://www.rfc-editor.org/info/rfc6347'>
<front>
<title>Datagram Transport Layer Security Version 1.2</title>
<author initials='E.' surname='Rescorla' fullname='E. Rescorla'><organization /></author>
<author initials='N.' surname='Modadugu' fullname='N. Modadugu'><organization /></author>
<date year='2012' month='January' />
<abstract><t>This document specifies version 1.2 of the Datagram Transport Layer Security (DTLS) protocol.  The DTLS protocol provides communications privacy for datagram protocols.  The protocol allows client/server applications to communicate in a way that is designed to prevent eavesdropping, tampering, or message forgery.  The DTLS protocol is based on the Transport Layer Security (TLS) protocol and provides equivalent security guarantees.  Datagram semantics of the underlying transport are preserved by the DTLS protocol.  This document updates DTLS 1.0 to work with TLS version 1.2.  [STANDARDS-TRACK]</t></abstract>
</front>
<seriesInfo name='RFC' value='6347'/>
<seriesInfo name='DOI' value='10.17487/RFC6347'/>
</reference>



<reference  anchor="RFC7250" target='https://www.rfc-editor.org/info/rfc7250'>
<front>
<title>Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)</title>
<author initials='P.' surname='Wouters' fullname='P. Wouters' role='editor'><organization /></author>
<author initials='H.' surname='Tschofenig' fullname='H. Tschofenig' role='editor'><organization /></author>
<author initials='J.' surname='Gilmore' fullname='J. Gilmore'><organization /></author>
<author initials='S.' surname='Weiler' fullname='S. Weiler'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='June' />
<abstract><t>This document specifies a new certificate type and two TLS extensions for exchanging raw public keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS).  The new certificate type allows raw public keys to be used for authentication.</t></abstract>
</front>
<seriesInfo name='RFC' value='7250'/>
<seriesInfo name='DOI' value='10.17487/RFC7250'/>
</reference>



<reference  anchor="RFC7296" target='https://www.rfc-editor.org/info/rfc7296'>
<front>
<title>Internet Key Exchange Protocol Version 2 (IKEv2)</title>
<author initials='C.' surname='Kaufman' fullname='C. Kaufman'><organization /></author>
<author initials='P.' surname='Hoffman' fullname='P. Hoffman'><organization /></author>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='P.' surname='Eronen' fullname='P. Eronen'><organization /></author>
<author initials='T.' surname='Kivinen' fullname='T. Kivinen'><organization /></author>
<date year='2014' month='October' />
<abstract><t>This document describes version 2 of the Internet Key Exchange (IKE) protocol.  IKE is a component of IPsec used for performing mutual authentication and establishing and maintaining Security Associations (SAs).  This document obsoletes RFC 5996, and includes all of the errata for it.  It advances IKEv2 to be an Internet Standard.</t></abstract>
</front>
<seriesInfo name='STD' value='79'/>
<seriesInfo name='RFC' value='7296'/>
<seriesInfo name='DOI' value='10.17487/RFC7296'/>
</reference>



<reference  anchor="RFC7301" target='https://www.rfc-editor.org/info/rfc7301'>
<front>
<title>Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension</title>
<author initials='S.' surname='Friedl' fullname='S. Friedl'><organization /></author>
<author initials='A.' surname='Popov' fullname='A. Popov'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<author initials='E.' surname='Stephan' fullname='E. Stephan'><organization /></author>
<date year='2014' month='July' />
<abstract><t>This document describes a Transport Layer Security (TLS) extension for application-layer protocol negotiation within the TLS handshake. For instances in which multiple application protocols are supported on the same TCP or UDP port, this extension allows the application layer to negotiate which protocol will be used within the TLS connection.</t></abstract>
</front>
<seriesInfo name='RFC' value='7301'/>
<seriesInfo name='DOI' value='10.17487/RFC7301'/>
</reference>



<reference  anchor="RFC7539" target='https://www.rfc-editor.org/info/rfc7539'>
<front>
<title>ChaCha20 and Poly1305 for IETF Protocols</title>
<author initials='Y.' surname='Nir' fullname='Y. Nir'><organization /></author>
<author initials='A.' surname='Langley' fullname='A. Langley'><organization /></author>
<date year='2015' month='May' />
<abstract><t>This document defines the ChaCha20 stream cipher as well as the use of the Poly1305 authenticator, both as stand-alone algorithms and as a &quot;combined mode&quot;, or Authenticated Encryption with Associated Data (AEAD) algorithm.</t><t>This document does not introduce any new crypto, but is meant to serve as a stable reference and an implementation guide.  It is a product of the Crypto Forum Research Group (CFRG).</t></abstract>
</front>
<seriesInfo name='RFC' value='7539'/>
<seriesInfo name='DOI' value='10.17487/RFC7539'/>
</reference>



<reference  anchor="RFC8095" target='https://www.rfc-editor.org/info/rfc8095'>
<front>
<title>Services Provided by IETF Transport Protocols and Congestion Control Mechanisms</title>
<author initials='G.' surname='Fairhurst' fullname='G. Fairhurst' role='editor'><organization /></author>
<author initials='B.' surname='Trammell' fullname='B. Trammell' role='editor'><organization /></author>
<author initials='M.' surname='Kuehlewind' fullname='M. Kuehlewind' role='editor'><organization /></author>
<date year='2017' month='March' />
<abstract><t>This document describes, surveys, and classifies the protocol mechanisms provided by existing IETF protocols, as background for determining a common set of transport services.  It examines the Transmission Control Protocol (TCP), Multipath TCP, the Stream Control Transmission Protocol (SCTP), the User Datagram Protocol (UDP), UDP-Lite, the Datagram Congestion Control Protocol (DCCP), the Internet Control Message Protocol (ICMP), the Real-Time Transport Protocol (RTP), File Delivery over Unidirectional Transport / Asynchronous Layered Coding (FLUTE/ALC) for Reliable Multicast, NACK- Oriented Reliable Multicast (NORM), Transport Layer Security (TLS), Datagram TLS (DTLS), and the Hypertext Transport Protocol (HTTP), when HTTP is used as a pseudotransport.  This survey provides background for the definition of transport services within the TAPS working group.</t></abstract>
</front>
<seriesInfo name='RFC' value='8095'/>
<seriesInfo name='DOI' value='10.17487/RFC8095'/>
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpcrypt">
<front>
<title>Cryptographic protection of TCP Streams (tcpcrypt)</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='Q' surname='Slack' fullname='Quinn Slack'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='November' day='29' year='2017' />

<abstract><t>This document specifies tcpcrypt, a TCP encryption protocol designed for use in conjunction with the TCP Encryption Negotiation Option (TCP-ENO).  Tcpcrypt coexists with middleboxes by tolerating resegmentation, NATs, and other manipulations of the TCP header.  The protocol is self-contained and specifically tailored to TCP implementations, which often reside in kernels or other environments in which large external software dependencies can be undesirable. Because the size of TCP options is limited, the protocol requires one additional one-way message latency to perform key exchange before application data may be transmitted.  However, this cost can be avoided between two hosts that have recently established a previous tcpcrypt connection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpcrypt-11' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpcrypt-11.txt' />
</reference>



<reference anchor="I-D.ietf-tcpinc-tcpeno">
<front>
<title>TCP-ENO: Encryption Negotiation Option</title>

<author initials='A' surname='Bittau' fullname='Andrea Bittau'>
    <organization />
</author>

<author initials='D' surname='Giffin' fullname='Daniel Giffin'>
    <organization />
</author>

<author initials='M' surname='Handley' fullname='Mark Handley'>
    <organization />
</author>

<author initials='D' surname='Mazieres' fullname='David Mazieres'>
    <organization />
</author>

<author initials='E' surname='Smith' fullname='Eric Smith'>
    <organization />
</author>

<date month='November' day='30' year='2017' />

<abstract><t>Despite growing adoption of TLS, a significant fraction of TCP traffic on the Internet remains unencrypted.  The persistence of unencrypted traffic can be attributed to at least two factors. First, some legacy protocols lack a signaling mechanism (such as a "STARTTLS" command) by which to convey support for encryption, making incremental deployment impossible.  Second, legacy applications themselves cannot always be upgraded, requiring a way to implement encryption transparently entirely within the transport layer.  The TCP Encryption Negotiation Option (TCP-ENO) addresses both of these problems through a new TCP option-kind providing out-of-band, fully backward-compatible negotiation of encryption.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tcpinc-tcpeno-18' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tcpinc-tcpeno-18.txt' />
</reference>



<reference anchor="I-D.ietf-quic-transport">
<front>
<title>QUIC: A UDP-Based Multiplexed and Secure Transport</title>

<author initials='J' surname='Iyengar' fullname='Janardhan Iyengar'>
    <organization />
</author>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<date month='December' day='5' year='2017' />

<abstract><t>This document defines the core of the QUIC transport protocol.  This document describes connection establishment, packet format, multiplexing and reliability.  Accompanying documents describe the cryptographic handshake and loss detection.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-transport-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-transport-08.txt' />
</reference>



<reference anchor="I-D.ietf-quic-tls">
<front>
<title>Using Transport Layer Security (TLS) to Secure QUIC</title>

<author initials='M' surname='Thomson' fullname='Martin Thomson'>
    <organization />
</author>

<author initials='S' surname='Turner' fullname='Sean Turner'>
    <organization />
</author>

<date month='December' day='5' year='2017' />

<abstract><t>This document describes how Transport Layer Security (TLS) is used to secure QUIC.  Note to Readers  Discussion of this draft takes place on the QUIC working group mailing list (quic@ietf.org), which is archived at https://mailarchive.ietf.org/arch/search/?email_list=quic [1].  Working Group information can be found at https://github.com/quicwg [2]; source code and issues list for this draft can be found at https://github.com/quicwg/base-drafts/labels/-tls [3].</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-quic-tls-08' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-quic-tls-08.txt' />
</reference>



<reference anchor="I-D.ietf-tls-tls13">
<front>
<title>The Transport Layer Security (TLS) Protocol Version 1.3</title>

<author initials='E' surname='Rescorla' fullname='Eric Rescorla'>
    <organization />
</author>

<date month='November' day='29' year='2017' />

<abstract><t>This document specifies version 1.3 of the Transport Layer Security (TLS) protocol.  TLS allows client/server applications to communicate over the Internet in a way that is designed to prevent eavesdropping, tampering, and message forgery.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-tls-tls13-22' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-tls-tls13-22.txt' />
</reference>



<reference anchor="I-D.ietf-ipsecme-tcp-encaps">
<front>
<title>TCP Encapsulation of IKE and IPsec Packets</title>

<author initials='T' surname='Pauly' fullname='Tommy Pauly'>
    <organization />
</author>

<author initials='S' surname='Touati' fullname='Samy Touati'>
    <organization />
</author>

<author initials='R' surname='Mantha' fullname='Ravi Mantha'>
    <organization />
</author>

<date month='May' day='31' year='2017' />

<abstract><t>This document describes a method to transport IKE and IPsec packets over a TCP connection for traversing network middleboxes that may block IKE negotiation over UDP.  This method, referred to as TCP encapsulation, involves sending both IKE packets for Security Association establishment and ESP packets over a TCP connection. This method is intended to be used as a fallback option when IKE cannot be negotiated over UDP.</t></abstract>

</front>

<seriesInfo name='Internet-Draft' value='draft-ietf-ipsecme-tcp-encaps-10' />
<format type='TXT'
        target='http://www.ietf.org/internet-drafts/draft-ietf-ipsecme-tcp-encaps-10.txt' />
</reference>


<reference anchor="BLAKE2" >
  <front>
    <title>BLAKE2 -- simpler, smaller, fast as MD5</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="Noise" >
  <front>
    <title>The Noise Protocol Framework</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="WireGuard" >
  <front>
    <title>WireGuard -- Next Generation Kernel Network Tunnel</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="SIGMA" >
  <front>
    <title>SIGMA -- The ‘SIGn-and-MAc’ Approach to Authenticated Diffie-Hellman and Its Use in the IKE-Protocols</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="CurveCP" >
  <front>
    <title>CurveCP -- Usable security for the Internet</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="Curve25519" >
  <front>
    <title>Curve25519 - new Diffie-Hellman speed records</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>
<reference anchor="MinimalT" >
  <front>
    <title>MinimaLT -- Minimal-latency Networking Through Better Security</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>




  </back>

<!-- ##markdown-source:
H4sIAO83TVoAA+1963IcR3bm/3qKXOqHGuHuJkgK1BDeiyEAHGF4EUyAkscb
GxvVVdnoEqqreusCsKVQhB9j/S7+t2/iJ9lzzUtVAaQ8MeHdCDvGM0R3dVbm
yZPnfOeai8Ui6YqutMfmxFz1zZ3dm3ptrpu0and105krm/VN0e3NZVN3dVaX
bZKuVo29Ozade6jVh1oaIcnrrEq3MGbepOtusUv7cr/o0l27cL9Z6G8Wh8+S
PO3scZLBf9/Uzf7YFNW6TpJi1+BL+rZ7fnj46vB5cmv393WTH5uLqrNNZbvF
GY6fJG2XVvn/TMu6gnfubZvsimPz32G6c9PCuxq7buFf+y3+438kSdp3m7o5
ToxZwP8beF17bK6X5hLnSZ/w7K/r7XYffFo3N0Cm3a60MINsSZ+1MLrtjs0z
+GhdVEVnzdu63tF3GSzv2Jz2O9t0RVXPzWlaFuu6qYrUvDo6fPYNP1X3VYer
/oi/zs1VB3RocRdOtrYpspSestu0KIEcRMu/S3ESy6zexmt4szQf6tYGS3iz
h8m6z3gBtymMZa5ttqnqsr4pLBBnvJ6jQ/NdU6f5fboPF5NuV02R39i5eXdi
Dp8/++bfsIjbBib0d/TfS5hSvIbTpTlZmp/qOg+WcbppirardxvbRN/+P7Aj
WXoPswl2JKnqZpt2xZ09puc+vD598e2zZ+6Pb14cvvB/HB0duT+Onn/z0v/x
7fMXwR8voz++8X/84eUr98fLw5d+gJcvvvnW/fHt86PD4I9X/rFvXxz6uX17
9MKP9ofDVzK3i8XZsrDdetFlu6LK8H+yZr/rHvzWVvXgu//VF5k//ZNflu1w
vLLF/3/2YvB5sQPhsbX4ooWtMpAr/MB3b0/enD/nfxsjYo0/NIuFaYst7FED
kmCblvSPddp2Jm3Nu7Mj+VHfwJZuug6GfPp0Vaa39vkSBI3+c5ev5UGWIa2+
TFmY/48Y+U82rRaXm6IsdjtrTvpt2rZ19fDzV+m2t6V5b+9AgD341D/W9W1t
firKrP60+OFf/+mfv7dp88iofHKKtILfVJVtSlvw0+/rorUDWl1vLH/upL15
3cABBKl7OyQQ0KfCR3fyJJ5k/uR3UekaVEndmEvbNDKxn4rG/rFPQc7Hk3Of
416+t58680cLC4KTVlfmDeoDJF6HczXXPay1nNrT+/v75T2MdIMj4Xl9uktB
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
JNGYQ96k626Z/F9Ku1NWC6UAAA==

-->

</rfc>

